# Copyright 2015 PDFium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build_overrides/pdfium.gni")

# This file contains PDFium-related build flags.

declare_args() {
  # Build PDFium either:
  # 1) When set to true, with a bundled FreeType, built from FreeType source
  #    code in //third_party/freetype and PDFium's FreeType configs in
  #    third_party/freetype/include.
  # 2) When set to false, use whatever FreeType target is defined in
  #    //build/config/freetype.
  pdf_bundle_freetype = pdf_bundle_freetype_override

  # Build PDFium either with or without v8 support.
  pdf_enable_v8 = pdf_enable_v8_override

  # Build PDFium either with or without XFA Forms support.
  pdf_enable_xfa = pdf_enable_xfa_override

  # If XFA, also support bmp codec. Ignored if not XFA.
  pdf_enable_xfa_bmp = true

  # If XFA, also support gif codec. Ignored if not XFA.
  pdf_enable_xfa_gif = true

  # If XFA, also support png codec. Ignored if not XFA.
  pdf_enable_xfa_png = true

  # If XFA, also support png codec. Ignored if not XFA.
  pdf_enable_xfa_tiff = true

  # Build PDFium against skia (experimental) rather than agg. Use Skia to draw
  # everything.
  pdf_use_skia = pdf_use_skia_override

  # Build PDFium against skia (experimental) rather than agg. Use Skia to draw
  # paths.
  pdf_use_skia_paths = pdf_use_skia_paths_override

  # Build PDFium with or without experimental win32 GDI APIs.
  pdf_use_win32_gdi = pdf_use_win32_gdi_override

  # Build PDFium standalone
  pdf_is_standalone = false

  # Build a complete static library
  pdf_is_complete_lib = false
  
  # Build a shared library
  pdf_is_shared_lib = false

  # Enable callgrind for performance profiling
  enable_callgrind = false

  # Enable coverage information
  use_coverage = false

  # Don't build against bundled zlib.
  use_system_zlib = false

  # Don't build against bundled lcms2.
  use_system_lcms2 = false
}

if (pdf_use_skia && pdf_use_skia_paths) {
  assert(false, "Enable at most ONE of pdf_use_skia and pdf_use_skia_paths")
}

# ==============================================================================
# PDF COMPONENT SETUP
# ==============================================================================
# Defines a component, which equates to a shared_library when
# pdf_is_shared_lib == true and a static_library otherwise.
#
# This code is a simplified version of the component_build template
# defined in //build/config/BUILDCONFIG.gn which currently can't be used
# with pdfium due to the build requirement "is_component_build = false"

template("pdf_component") {
  if (pdf_is_shared_lib) {
    _pdf_component_mode = "shared_library"
  } else {
    _pdf_component_mode = "static_library"
  }
  target(_pdf_component_mode, target_name) {
    # Explicitly forward visibility, implicitly forward everything else.
    # Forwarding "*" doesn't recurse into nested scopes (to avoid copying all
    # globals into each template invocation), so won't pick up file-scoped
    # variables. Normally this isn't too bad, but visibility is commonly
    # defined at the file scope. Explicitly forwarding visibility and then
    # excluding it from the "*" set works around this problem.
    # See http://crbug.com/594610
    forward_variables_from(invoker, [ "visibility" ])
    forward_variables_from(invoker, "*", [ "visibility" ])
    # All shared libraries must have the sanitizer deps to properly link in
    # asan mode (this target will be empty in other cases).
    if (!defined(deps)) {
      deps = []
    }
    deps += [ "//build/config:exe_and_shlib_deps" ]
  }
}

# Pdf component defaults
set_defaults("pdf_component") {
  if (!defined(deps)) {
      deps = []
    }
  if (pdf_is_shared_lib) {
    configs = default_shared_library_configs
    if (is_android) {
      configs -= [ "//build/config/android:hide_all_but_jni_onload" ]
    }
  } else {
      configs = default_compiler_configs
  }
}

# Custom template used to enable building with "source_set" instead of
# "static_library" when doing a shared or complete static library build

template("pdf_source_set") {
  if (pdf_is_complete_lib || pdf_is_shared_lib) {
    pdf_link_target_type = "source_set"
  } else {
    pdf_link_target_type = "static_library"
  }
  target(pdf_link_target_type, target_name) {
    #See http://crbug.com/594610
    forward_variables_from(invoker, [ "visibility" ])
    forward_variables_from(invoker, "*", [ "visibility" ])
  }
}

set_defaults("pdf_source_set") {
  if (!defined(deps)) {
    deps = []
  }
  configs = default_compiler_configs
 }

