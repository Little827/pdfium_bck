# Copyright 2015 PDFium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build_overrides/pdfium.gni")

# This file contains PDFium-related build flags.

declare_args() {
  # Build PDFium either:
  # 1) When set to true, with a bundled FreeType, built from FreeType source
  #    code in //third_party/freetype and PDFium's FreeType configs in
  #    third_party/freetype/include.
  # 2) When set to false, use whatever FreeType target is defined in
  #    //build/config/freetype.
  pdf_bundle_freetype = pdf_bundle_freetype_override

  # Generate logging messages for click events that reach PDFium
  pdf_enable_click_logging = false

  # Build PDFium either with or without v8 support.
  pdf_enable_v8 = pdf_enable_v8_override

  # Build PDFium either with or without XFA Forms support.
  pdf_enable_xfa = pdf_enable_xfa_override

  # If XFA, also support bmp codec. Ignored if not XFA.
  pdf_enable_xfa_bmp = true

  # If XFA, also support gif codec. Ignored if not XFA.
  pdf_enable_xfa_gif = true

  # If XFA, also support png codec. Ignored if not XFA.
  pdf_enable_xfa_png = true

  # If XFA, also support tiff codec. Ignored if not XFA.
  pdf_enable_xfa_tiff = true

  # Build PDFium to use Skia (experimental) for all PDFium graphics.
  # If enabled, might coexist in build with AGG graphics, in which case the
  # default renderer is selectable at runtime.
  pdf_use_skia = pdf_use_skia_override

  # Build PDFium to use Skia (experimental), using Skia only for path support.
  # Coexists in build with AGG graphics.  Selection of default renderer might
  # be selectable at runtime.
  pdf_use_skia_paths = pdf_use_skia_paths_override

  # Determine if runtime selection of the renderer is allowed.
  if (is_android) {
    # Skia is not supported in Android build.
    pdf_allow_runtime_renderer_selection = false
  } else {
    pdf_allow_runtime_renderer_selection =
        pdf_allow_runtime_renderer_selection_override
  }

  # Build PDFium standalone
  pdf_is_standalone = false

  # Build a complete static library
  pdf_is_complete_lib = false

  # Enable callgrind for performance profiling
  enable_callgrind = false

  # Don't build against bundled zlib.
  use_system_zlib = false

  # Don't build against bundled lcms2.
  use_system_lcms2 = false

  # Don't build against bundled libopenjpeg2.
  use_system_libopenjpeg2 = false

  # Don't build against bundled libpng.
  use_system_libpng = false

  # Enable SSE2 for MSVC builds. Ignored if it's not a MSVC build.
  msvc_use_sse2 = true
}

declare_args() {
  # Build PDFium to use AGG.  Might coexist with Skia, as it is needed if Skia
  # is only used for paths, and is needed if general runtime selection of the
  # renderer is desired.
  pdf_include_agg = pdf_allow_runtime_renderer_selection || !pdf_use_skia

  # If runtime renderer selection is requested but neither variation of Skia
  # support is selected then include Skia paths support and default to using
  # AGG for the renderer.
  if (pdf_use_skia || pdf_use_skia_paths) {
    # A Skia build variation was explicitly selected, that is the initial default.
    pdf_default_renderer = "skia"
    pdf_include_skia_paths = pdf_use_skia_paths
  } else {
    # Since one of the Skia variants must be present for runtime selection,
    # choose Skia path as enabled when runtime selection is requested.  AGG is
    # still the default at runtime.
    pdf_default_renderer = "agg"
    pdf_include_skia_paths = pdf_allow_runtime_renderer_selection
  }
}

if (pdf_use_skia && pdf_include_skia_paths) {
  assert(false, "Enable at most ONE of pdf_use_skia and pdf_use_skia_paths")
}
if (pdf_use_skia && pdf_include_skia_paths) {
  assert(false,
         "Inclusion of Skia paths support cannot be enabled with pdf_use_skia")
}
if (pdf_allow_runtime_renderer_selection) {
  assert(pdf_use_skia || pdf_include_skia_paths,
         "Must have a Skia version enabled for runtime selection of renderer")
  assert(pdf_include_agg,
         "Must have AGG included for runtime selection of renderer")
}

assert(!pdf_is_complete_lib || !is_component_build,
       "pdf_is_complete_lib=true requires is_component_build=false")
