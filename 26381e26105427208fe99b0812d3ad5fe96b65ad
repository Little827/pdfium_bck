{
  "comments": [
    {
      "key": {
        "uuid": "e68e8ace_ca7a3509",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 12,
      "author": {
        "id": 5045
      },
      "writtenOn": "2020-01-08T21:45:27Z",
      "side": 1,
      "message": "Can we mention the following? (Just to confirm the plan.)\n\nFor now, this CL treats nullopt as 0, but a future CL will handle 0 differently.",
      "revId": "26381e26105427208fe99b0812d3ad5fe96b65ad",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e855a944_04f89945",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 12,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-01-09T00:19:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e68e8ace_ca7a3509",
      "revId": "26381e26105427208fe99b0812d3ad5fe96b65ad",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34124819_338fbac1",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap_unittest.cpp",
        "patchSetId": 8
      },
      "lineNbr": 10,
      "author": {
        "id": 5045
      },
      "writtenOn": "2020-01-08T21:43:07Z",
      "side": 1,
      "message": "If StringToCode() returns nullopt, the unit test crashes. \"One should first check to make sure it contains a value,\" means writing something like:\n\nOptional\u003cuint32_t\u003e result \u003d CPDF_ToUnicodeMap::StringToCode(\"\u003cc2\");\nASSERT_TRUE(result.has_value());\nEXPECT_EQ(194u, result.value());\n\nThis is analogous to:\n\nEXPECT_EQ(42, GetFooWhichCanReturnNullptr()-\u003eget_bar_int());\n\nvs.\n\nFoo* foo_ptr \u003d GetFooWhichCanReturnNullptr();\nASSERT_TRUE(foo_ptr);\nEXPECT_EQ(42, foo_ptr-\u003eget_bar_int());",
      "revId": "26381e26105427208fe99b0812d3ad5fe96b65ad",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d3f7e78_b13c1416",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap_unittest.cpp",
        "patchSetId": 8
      },
      "lineNbr": 10,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-01-08T21:58:14Z",
      "side": 1,
      "message": "If you want to get a bit fancy, you can use gMock matchers:\n\n  EXPECT_THAT(actual_optional, Optional(expected_value_matcher))\n\nhttps://github.com/google/googletest/blob/master/googlemock/docs/cheat_sheet.md#generic-comparison\n\nThe Optional() matcher only requires an optional that has the same API as std::optional (in particular, supports the \"!\" and \"*\" operators), so it should work with base::Optional/pdfium::Optional, too.\n\nThis doesn\u0027t help if the rest of the test requires that the optional is present, but should be a good fit for this case.",
      "parentUuid": "34124819_338fbac1",
      "revId": "26381e26105427208fe99b0812d3ad5fe96b65ad",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef337338_5a9c58e9",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap_unittest.cpp",
        "patchSetId": 8
      },
      "lineNbr": 10,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-01-09T00:19:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d3f7e78_b13c1416",
      "revId": "26381e26105427208fe99b0812d3ad5fe96b65ad",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    }
  ]
}