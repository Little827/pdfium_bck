{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c8e7238b_063d9e8b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-02-10T21:12:18Z",
      "side": 1,
      "message": "In general, I would suggest breaking this CL apart into smaller ones.",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c061902_48f5a18b",
        "filename": "core/fpdfdoc/cpdf_structelement.h",
        "patchSetId": 12
      },
      "lineNbr": 68,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-02-10T21:12:18Z",
      "side": 1,
      "message": "To avoid dangling pointers, when the parent is about to go away, it has to tell its children to reset their parent pointers.",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68cf7691_75d1c276",
        "filename": "core/fpdfdoc/cpdf_structelement.h",
        "patchSetId": 12
      },
      "lineNbr": 68,
      "author": {
        "id": 8786
      },
      "writtenOn": "2022-02-10T21:46:37Z",
      "side": 1,
      "message": "Changing it to RetainPtr",
      "parentUuid": "3c061902_48f5a18b",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a8c0fd5_a280d681",
        "filename": "core/fpdfdoc/cpdf_structelement.h",
        "patchSetId": 12
      },
      "lineNbr": 68,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-02-10T22:01:27Z",
      "side": 1,
      "message": "The change didn\u0027t make it in the patch set 13 upload.",
      "parentUuid": "68cf7691_75d1c276",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7563b50d_8a7ec0f6",
        "filename": "core/fpdfdoc/cpdf_structelement.h",
        "patchSetId": 12
      },
      "lineNbr": 68,
      "author": {
        "id": 8786
      },
      "writtenOn": "2022-02-10T22:16:46Z",
      "side": 1,
      "message": "Apologies, I did commit without add.",
      "parentUuid": "6a8c0fd5_a280d681",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ec1e171_55fc0de2",
        "filename": "core/fpdfdoc/cpdf_structelement.h",
        "patchSetId": 12
      },
      "lineNbr": 68,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-02-10T22:19:56Z",
      "side": 1,
      "message": "I don\u0027t think that works. Using RetainPtr this way creates circular references and then none of the elements gets freed.",
      "parentUuid": "6a8c0fd5_a280d681",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8655722_4e87571c",
        "filename": "core/fpdfdoc/cpdf_structtree.cpp",
        "patchSetId": 12
      },
      "lineNbr": 107,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-02-10T21:12:18Z",
      "side": 1,
      "message": "Is this necessary?",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a20b5e84_f99cfd57",
        "filename": "core/fpdfdoc/cpdf_structtree.cpp",
        "patchSetId": 12
      },
      "lineNbr": 107,
      "author": {
        "id": 8786
      },
      "writtenOn": "2022-02-10T21:46:37Z",
      "side": 1,
      "message": "Should work without it.",
      "parentUuid": "f8655722_4e87571c",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7ebd796_f8b8b056",
        "filename": "fpdfsdk/fpdf_structtree.cpp",
        "patchSetId": 12
      },
      "lineNbr": 83,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-02-10T21:12:18Z",
      "side": 1,
      "message": "This can probably be its own CL?",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d60007cb_d66729d3",
        "filename": "fpdfsdk/fpdf_structtree.cpp",
        "patchSetId": 12
      },
      "lineNbr": 83,
      "author": {
        "id": 8786
      },
      "writtenOn": "2022-02-10T21:46:37Z",
      "side": 1,
      "message": "They are all struct tree related so I would prefer if they can all go in together to avoid latency and I can be quickly unblocked. However, if they must be splitted, I guess I would do that. The changes are minor in nature so I doubt if they will break anything.",
      "parentUuid": "f7ebd796_f8b8b056",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "850252fa_3b243bbc",
        "filename": "fpdfsdk/fpdf_structtree.cpp",
        "patchSetId": 12
      },
      "lineNbr": 83,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-02-10T22:01:27Z",
      "side": 1,
      "message": "Wouldn\u0027t bundling all of the changes together create additional latency? The FPDF_StructElement_GetActualText() change can\u0027t land until everything here has been reviewed.\n\nWith finer grain changes, if something goes wrong, it is easier to locate the cause when bisecting. If many things get bunched together into one large CL, it will be much harder to figure out where in that large CL the problem lies.",
      "parentUuid": "d60007cb_d66729d3",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a55bab63_f5b93531",
        "filename": "fpdfsdk/fpdf_structtree.cpp",
        "patchSetId": 12
      },
      "lineNbr": 114,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-02-10T21:12:18Z",
      "side": 1,
      "message": "Can this simple fix go in into its own CL, with a corresponding test case change to trigger this code path?",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64eeef82_09552dd7",
        "filename": "fpdfsdk/fpdf_structtree.cpp",
        "patchSetId": 12
      },
      "lineNbr": 114,
      "author": {
        "id": 8786
      },
      "writtenOn": "2022-02-10T21:46:37Z",
      "side": 1,
      "message": "As same above.",
      "parentUuid": "a55bab63_f5b93531",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8827332a_c16dfe38",
        "filename": "fpdfsdk/fpdf_structtree.cpp",
        "patchSetId": 12
      },
      "lineNbr": 246,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-02-10T21:12:18Z",
      "side": 1,
      "message": "nit: PDFium prefers not to declare variables inside conditionals.",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14dfdab8_ecc508cf",
        "filename": "fpdfsdk/fpdf_structtree.cpp",
        "patchSetId": 12
      },
      "lineNbr": 246,
      "author": {
        "id": 8786
      },
      "writtenOn": "2022-02-10T21:46:37Z",
      "side": 1,
      "message": "I saw several instances where this isn\u0027t true:\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/pdfium/core/fpdfdoc/cpdf_structelement.cpp;l\u003d92\n\nI can change if that was accidentally slipped and it shouldn\u0027t have been allowed.",
      "parentUuid": "8827332a_c16dfe38",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "782fdf8e_0903f187",
        "filename": "fpdfsdk/fpdf_structtree.cpp",
        "patchSetId": 12
      },
      "lineNbr": 246,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-02-10T22:01:27Z",
      "side": 1,
      "message": "Sure. This code base is far from perfect. Let\u0027s go in the preferred direction for new code.",
      "parentUuid": "14dfdab8_ecc508cf",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a15e6b4_1bbd9a74",
        "filename": "fpdfsdk/fpdf_structtree.cpp",
        "patchSetId": 12
      },
      "lineNbr": 246,
      "author": {
        "id": 8786
      },
      "writtenOn": "2022-02-10T22:16:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "782fdf8e_0903f187",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ed6e5cf_c3e29c50",
        "filename": "fpdfsdk/fpdf_structtree.cpp",
        "patchSetId": 12
      },
      "lineNbr": 258,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-02-10T21:12:18Z",
      "side": 1,
      "message": "nit: Add curly braces.",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57a7ff92_fc249eda",
        "filename": "fpdfsdk/fpdf_structtree.cpp",
        "patchSetId": 12
      },
      "lineNbr": 258,
      "author": {
        "id": 8786
      },
      "writtenOn": "2022-02-10T21:46:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8ed6e5cf_c3e29c50",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "017e64b2_b22dd84f",
        "filename": "testing/resources/tagged_alt_text.in",
        "patchSetId": 12
      },
      "lineNbr": 124,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-02-10T21:12:18Z",
      "side": 1,
      "message": "While this can be done, I don\u0027t think semantically it makes sense to have both /Alt and /ActualText for the same element.",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "623de839_693754a1",
        "filename": "testing/resources/tagged_alt_text.in",
        "patchSetId": 12
      },
      "lineNbr": 124,
      "author": {
        "id": 8786
      },
      "writtenOn": "2022-02-10T21:46:37Z",
      "side": 1,
      "message": "I am going to explore the entire tree and it would be great to have complete visibility. It doesn\u0027t harm in exposing what is already present?",
      "parentUuid": "017e64b2_b22dd84f",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9aba9c30_6a9e072a",
        "filename": "testing/resources/tagged_alt_text.in",
        "patchSetId": 12
      },
      "lineNbr": 124,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-02-10T22:01:27Z",
      "side": 1,
      "message": "Not sure what you mean by \"already present\" when this line is being added by this CL. I\u0027ve never seen a PDF where the same StructElem has both of these. They usually only have one or the other.",
      "parentUuid": "623de839_693754a1",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c9d5fff_7b290557",
        "filename": "testing/resources/tagged_alt_text.in",
        "patchSetId": 12
      },
      "lineNbr": 124,
      "author": {
        "id": 8786
      },
      "writtenOn": "2022-02-10T22:16:46Z",
      "side": 1,
      "message": "I understand but we get a lot of PDFs (100s of thousands, pretty random ones from cloud customers), not having a way to read a field is a limitation. I am trying to expose whatever is defined in the specs, whether it exists in particular PDF or not. My project is exploratory in nature, where I am going to run it on thousands of PDFs and see what I find.\n\nHow does it hurt anyway? It is defined in the spec and spec doesn\u0027t restrict one from setting both of them, hence API should provide support to read those fields.",
      "parentUuid": "9aba9c30_6a9e072a",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f0ec8e8_428e6fde",
        "filename": "testing/resources/tagged_alt_text.in",
        "patchSetId": 12
      },
      "lineNbr": 124,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-02-10T22:29:26Z",
      "side": 1,
      "message": "This just doesn\u0027t set a good example. It is possible to have a semantically correct PDF and still be able to test FPDF_StructElement_GetActualText(). Can we just do that?",
      "parentUuid": "6c9d5fff_7b290557",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43ef405d_0166be29",
        "filename": "testing/resources/tagged_alt_text.in",
        "patchSetId": 12
      },
      "lineNbr": 124,
      "author": {
        "id": 8786
      },
      "writtenOn": "2022-02-10T22:39:19Z",
      "side": 1,
      "message": "I am sorry I didn\u0027t get \"It is possible to have a semantically correct PDF and still be able to test FPDF_StructElement_GetActualText().\"? \n\nOur goal is really to not judge whether pdf is semantically correct or not. We can\u0027t tell customers that since PDF isn\u0027t semantically correct we can\u0027t extract something. Our goal in this project is to identify with our best effort majority of tables. Highly likely that the output of our parsing might end up feeding as feature to a ML model. In this case, all I am doing is adding a getter for a well defined field in the spec, why is that a wrong thing to do?",
      "parentUuid": "0f0ec8e8_428e6fde",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd45767f_537ff8fe",
        "filename": "testing/resources/tagged_table.pdf",
        "patchSetId": 12
      },
      "lineNbr": 140,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-02-10T21:12:18Z",
      "side": 1,
      "message": "I\u0027m guessing this is added to test when the value is an integer. Is the existing /ColSpan 2 in object 14 0 sufficient for that purpose?",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f358dcb1_296cf5ed",
        "filename": "testing/resources/tagged_table.pdf",
        "patchSetId": 12
      },
      "lineNbr": 140,
      "author": {
        "id": 8786
      },
      "writtenOn": "2022-02-10T21:46:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fd45767f_537ff8fe",
      "revId": "d2838bb3f047be7f64bb5c8549f1fb52d3480f91",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    }
  ]
}