{{header}}
{{object 1 0}} <<
  /Type /Catalog
  /Pages 2 0 R
  /AcroForm << /Fields [ 4 0 R 10 0 R ] /DR 5 0 R >>
>>
endobj
{{object 2 0}} <<
  /Count 1
  /Kids [ 3 0 R ]
  /Type /Pages
>>
endobj
{{object 3 0}} <<
  /Type /Page
  /Parent 2 0 R
  /Resources 5 0 R
  /MediaBox [ 0 0 300 200 ]
  /Contents 8 0 R
  /Annots [ 4 0 R 10 0 R ]
>>
endobj
{{object 4 0}} <<
  /Type /Annot
  /FT /Tx
  /T (Text Box)
  /DA (0 0 0 rg /F1 12 Tf)
  /Rect [ 100 100 200 130 ]
  /Subtype /Widget
  /AA <<
    /F 9 0 R
  >>
>>
endobj
{{object 5 0}} <<
  /Font 6 0 R
>>
endobj
{{object 6 0}} <<
  /F1 7 0 R
>>
endobj
{{object 7 0}} <<
  /Type /Font
  /Subtype /Type1
  /BaseFont /Helvetica
>>
endobj
{{object 8 0}} <<
{{streamlen}}
>>
stream
endstream
endobj
{{object 9 0}} <<
  /JS (
    function expectWithInitial(initial, expression, expected) {
      try {
        event.value = initial;
        var actual = eval(expression);
        if (actual == expected) {
          app.alert('PASS: ' + expression + ' = ' + actual);
        } else {
          app.alert('FAIL: ' + expression + ' = ' + actual + ', expected ' + expected + " ");
        }
      } catch (e) {
        app.alert('ERROR: ' + e);
      }
    }

    function expect(expression, expected) {
      if (expected == "dummy") {
        app.alert('FAIL: "dummy" cannot be used as the expected value');
	return;
      }
      expectWithInitial("dummy", expression, expected);
    }

    function expectEventValueWithInitial(initial, expression, expected) {
      try {
        event.value = initial;
        eval(expression);
        var actual = event.value;
        if (actual == expected) {
          app.alert('PASS: ' + expression + ' = ' + actual);
        } else {
          app.alert('FAIL: ' + expression + ' = ' + actual + ', expected ' + expected + " ");
        }
      } catch (e) {
        app.alert('ERROR: ' + e);
      }
    }

    function expectEventValue(expression, expected) {
      if (expected == "dummy") {
        app.alert('FAIL: "dummy" cannot be used as the expected value');
	return;
      }
      expectEventValueWithInitial("dummy", expression, expected);
    }

    function expectErrorWithInitial(initial, expression) {
      try {
        event.value = initial;
        var actual = eval(expression);
        app.alert('FAIL: ' + expression + ' = ' + actual + ', expected to throw');
      } catch (e) {
        app.alert('PASS: ' + expression + ' threw ' + e);
      }
    }

    function expectError(expression) {
      expectErrorWithInitial("dummy", expression);
    }

    try {
      app.alert("*** starting test ***");

      expectError("AFDate_Format()");
      expectError("AFDate_Format(1, 2)");
      expectEventValueWithInitial("GMT", "AFDate_Format(1)", "1/1/70");
      expectEventValueWithInitial("PDT", "AFDate_Format(1)", "5/9/14");
      expectEventValueWithInitial("GMT", "AFDate_Format('blooey')", "1/1");
      expectEventValueWithInitial("PDT", "AFDate_Format('blooey')", "5/9");

      app.alert("**********************");

      expectError("AFDate_FormatEx()");
      expectError("AFDate_FormatEx(1, 2)");
      expectEventValueWithInitial("x", "AFDate_FormatEx(2)", "2");
      expectEventValueWithInitial("x", "AFDate_FormatEx('blooey')", "blooey");
      expectEventValueWithInitial("x", "AFDate_FormatEx('m/d')", "5/9");

      app.alert("**********************");

      expectError("AFDate_Keystroke()");
      expectError("AFDate_Keystroke(1, 2)");
      expectEventValueWithInitial("04/19", "AFDate_Keystroke(2)", "04/19");
      expectEventValueWithInitial("04/19/15", "AFDate_Keystroke('blooey')", "04/19/15");

      app.alert("**********************");

      expectError("AFDate_KeystrokeEx()");
      expectError("AFDate_KeystrokeEx(1, 2)");
      expectEventValueWithInitial("x", "AFDate_KeystrokeEx(2)", "x");
      expectEventValueWithInitial("x", "AFDate_KeystrokeEx('blooey')", "x");
      expectEventValueWithInitial("x", "AFDate_KeystrokeEx('m/d')", "x");

      app.alert("**********************");

      expectError("AFExtractNums()");
      expectError("AFExtractNums(1, 2)");
      expect("AFExtractNums('100 200')", "100,200");

      app.alert("**********************");

      expectError("AFMakeNumber()");
      expectError("AFMakeNumber(1, 2)");
      expect("AFMakeNumber('2blooey')", 0);
      expect("AFMakeNumber(1)", 1);
      expect("AFMakeNumber('1.2')", 1.2);
      expect("AFMakeNumber('1,2')", 1.2);

      app.alert("**********************");

      expectError("AFMergeChange()");
      expectError("AFMergeChange(1, 2)");
      expectWithInitial("one", "AFMergeChange(undefined)", "one");

      app.alert("**********************");

      expectError("AFNumber_Format()");
      expectError("AFNumber_Format(0, 1, 0, 0, '', false, 42)");
      expectEventValueWithInitial("blooey", "AFNumber_Format(0, 1, 0, 0, '', false)", 0);
      expectEventValueWithInitial(12, "AFNumber_Format(0, 1, 0, 0, '', false)", 12);

      app.alert("**********************");

      expectError("AFNumber_Keystroke()");
      expectError("AFNumber_Keystroke(1)");
      expectErrorWithInitial("abc", "AFNumber_Keystroke(1, 2)");
      expectEventValueWithInitial("123", "AFNumber_Keystroke(1, 2)", "123");
      expectEventValueWithInitial("123", "AFNumber_Keystroke(1, 2, 3)", "123");

      app.alert("**********************");

      expectError("AFParseDateEx()");
      expectError("AFParseDateEx(1, 2, 3)");
      expect("AFParseDateEx(1, 2)", "1399672130000");

      app.alert("**********************");

      expectError("AFPercent_Format()");
      expectError("AFPercent_Format(1, 2, 3)");
      expectEventValueWithInitial(12.3456, "AFPercent_Format(1, 0)", "1,234.6%");
      expectEventValueWithInitial(12.3456, "AFPercent_Format(4, 1)", "1234.5600%");

      app.alert("**********************");

      expectError("AFPercent_Keystroke()");
      expectError("AFPercent_Keystroke(1)");
      expectErrorWithInitial("abc", "AFPercent_Keystroke(1, 0)");
      expectEventValueWithInitial(".123", "AFPercent_Keystroke(1, 0)", ".123");

      app.alert("**********************");

      expectError("AFRange_Validate()", undefined);
      expectError("AFRange_Validate(1, 2, 3, 4, 5)", undefined);
      expectEventValueWithInitial("1", "AFRange_Validate(true, 2, true, 4)", "1");  // Notifies "between".
      expectEventValueWithInitial("5", "AFRange_Validate(true, 2, true, 4)", "5");  // Notifies "between".
      expectEventValueWithInitial("1", "AFRange_Validate(true, 2, false, 4)", "1");  // Notifies "greater".
      expectEventValueWithInitial("5", "AFRange_Validate(false, 2, true, 4)", "5");  // Notifies "less".
      expectEventValueWithInitial("3", "AFRange_Validate(true, 2, true, 4)", "3");   // No notification.
      expectEventValueWithInitial("1", "AFRange_Validate(false, 2, true, 4)", "1");  // No notification.
      expectEventValueWithInitial("5", "AFRange_Validate(true, 2, false, 4)", "5");  // No notification.

      app.alert("**********************");

      expectError("AFSimple()", 2);
      expectError("AFSimple(1, 2, 3, 4)");
      expect("AFSimple(1, 2, 3)", 2);

      app.alert("**********************");

      expectError("AFSimple_Calculate()");
      expectError("AFSimple_Calculate(1)");
      expectEventValue("AFSimple_Calculate('blooey', [1, 3, 14])", 0);
      expectEventValue("AFSimple_Calculate('AVG', [1, 3, 14])", 0);
      expectEventValue("AFSimple_Calculate('SUM', [1, 3, 14])", 0);

      app.alert("**********************");

      expectError("AFSpecial_Format()", undefined);
      expectError("AFSpecial_Format(1, 2)", undefined);
      expectEventValue("AFSpecial_Format(3)", "--");

      app.alert("**********************");

      expectError("AFSpecial_Keystroke()");
      expectError("AFSpecial_Keystroke(65, 66)");
      expectEventValueWithInitial("abc", "AFSpecial_Keystroke(65)", "abc");

      app.alert("**********************");

      expectError("AFSpecial_KeystrokeEx()", undefined);
      expectEventValueWithInitial("12345", "AFSpecial_KeystrokeEx('')", "12345");      // No notification.
      expectEventValueWithInitial("123", "AFSpecial_KeystrokeEx('9999')", "123");      // Notifies invalid.
      expectEventValueWithInitial("12345", "AFSpecial_KeystrokeEx('9999')", "12345");  // Notifies too long.
      expectEventValueWithInitial("abcd", "AFSpecial_KeystrokeEx('9999')", "abcd");    // Notifies invalid.
      expectEventValueWithInitial("1234", "AFSpecial_KeystrokeEx('9999')", "1234");
      expectEventValueWithInitial("abcd", "AFSpecial_KeystrokeEx('XXXX')", "abcd");

      app.alert("**********************");

      expectError("AFTime_Format()");
      expectError("AFTime_Format(1, 2)");
      expectEventValue("AFTime_Format(1)", "9:48 pm");

      app.alert("**********************");

      expectError("AFTime_FormatEx()");
      expectError("AFTime_FormatEx('blooey', 42)");
      expectEventValue("AFTime_FormatEx('blooey')", "blooey");

      app.alert("**********************");

      expectError("AFTime_Keystroke()", undefined);
      expectError("AFTime_Keystroke(1, 2)", undefined);
      expectEventValueWithInitial("12:03", "AFTime_Keystroke(65)", "12:03");

      app.alert("**********************");

      expectError("AFTime_KeystrokeEx()");
      expectError("AFTime_KeystrokeEx(1, 2)");
      expectEventValueWithInitial("12:04", "AFTime_KeystrokeEx('blooey')", "12:04");

      app.alert("*** ending test ***");
    } catch (e) {
      app.alert("Truly unexpected error occured: " + e);
    }
  )
  /S /JavaScript
>>
endobj
{{object 10 0}} <<
  /Type /Annot
  /FT /Tx
  /T (Text2)
  /DA (0 0 0 rg /F1 12 Tf)
  /Rect [ 100 40 200 70 ]
  /Subtype /Widget
>>
endobj
{{xref}}
{{trailer}}
{{startxref}}
%%EOF
