{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2686b261_19b79dac",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 5495
      },
      "writtenOn": "2023-11-10T17:55:43Z",
      "side": 1,
      "message": "I suspect we may delete the sub-classes through pointers to the parent class, at which point the destructor must be virtual or sub-class cleanup will be missed. Please confirm.",
      "range": {
        "startLine": 9,
        "startChar": 46,
        "endLine": 10,
        "endChar": 18
      },
      "revId": "6adfd2633444346e483b8cc3e2104466f8e00e06",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8194dd3c_2d4c50ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5495
      },
      "writtenOn": "2023-11-10T20:43:40Z",
      "side": 1,
      "message": "I played around with this a bit, and I\u0027m pretty sure this works out better with moving the parent class to a member.  We can then default a bunch of, say, operator\u003d() methods and do more reasonable assignments.  But it will be lotsa changes to introduce a .m_GraphicStates in lotsa places.",
      "revId": "6adfd2633444346e483b8cc3e2104466f8e00e06",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2c03125_9b8c1615",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5495
      },
      "writtenOn": "2023-11-10T23:17:11Z",
      "side": 1,
      "message": "So I took a quick stab at this in the chain of CLs starting at https://pdfium-review.googlesource.com/c/pdfium/+/113514 . It gets ugly until we get to the end when we get to write \u003ddefault a lot.",
      "revId": "6adfd2633444346e483b8cc3e2104466f8e00e06",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "011049f0_8fec3458",
        "filename": "core/fpdfapi/page/cpdf_allstates.h",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 5495
      },
      "writtenOn": "2023-11-10T17:57:42Z",
      "side": 1,
      "message": "Alternatively, this might want to be a member rather than a superclass for both of the classes inheriting from it.",
      "range": {
        "startLine": 17,
        "startChar": 28,
        "endLine": 17,
        "endChar": 54
      },
      "revId": "6adfd2633444346e483b8cc3e2104466f8e00e06",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd47de49_fae50f39",
        "filename": "core/fpdfapi/page/cpdf_graphicstates.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 5495
      },
      "writtenOn": "2023-11-10T17:55:43Z",
      "side": 1,
      "message": "If we are still OK to go in light of the previous comment, then this destructor needs to be protected to prevent deleting though the base class, ideally with a comment saying this.",
      "range": {
        "startLine": 19,
        "startChar": 2,
        "endLine": 19,
        "endChar": 24
      },
      "revId": "6adfd2633444346e483b8cc3e2104466f8e00e06",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    }
  ]
}