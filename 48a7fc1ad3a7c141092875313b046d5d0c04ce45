{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a63420a5_08a36ee4",
        "filename": "core/fpdfapi/page/cpdf_textstate.cpp",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 5495
      },
      "writtenOn": "2023-10-13T16:25:51Z",
      "side": 1,
      "message": "I\u0027d suggest making m_Matrix and m_CTM be std::array\u003cfloat, 4\u003e, and then just doing a copy-construct in the intializer list above like m_CTM(that.m_CTM), ...",
      "range": {
        "startLine": 102,
        "startChar": 35,
        "endLine": 102,
        "endChar": 43
      },
      "revId": "48a7fc1ad3a7c141092875313b046d5d0c04ce45",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8da49586_251b6272",
        "filename": "core/fxge/dib/cfx_dibbase.cpp",
        "patchSetId": 3
      },
      "lineNbr": 857,
      "author": {
        "id": 5495
      },
      "writtenOn": "2023-10-13T16:25:51Z",
      "side": 1,
      "message": "nit: I\u0027d expect m_pallete to implicitly convert to span without the need for make_span if this were invoked as spancpy\u003cuint32_t\u003e(m_palette... but not sure if that is any better.",
      "range": {
        "startLine": 857,
        "startChar": 17,
        "endLine": 857,
        "endChar": 34
      },
      "revId": "48a7fc1ad3a7c141092875313b046d5d0c04ce45",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b33695ea_1dbaaa9e",
        "filename": "core/fxge/dib/cfx_imagetransformer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 286,
      "author": {
        "id": 5495
      },
      "writtenOn": "2023-10-13T16:25:51Z",
      "side": 1,
      "message": "nit: there\u0027s a better way of writing this, but I\u0027ll be darned if I know what it is :). Maybe make a temporary argb_span from argb then\n `fxcrt::spancpy(argb_span, palette.first(argb_span.size());`\n\nAlternatively if argb were std::array\u003cuint32_t, 256\u003e we might be able to\n  `fxcrt::spancpy\u003cuint32_t\u003e(argb, palette.first(argb.size());`",
      "range": {
        "startLine": 286,
        "startChar": 4,
        "endLine": 286,
        "endChar": 54
      },
      "revId": "48a7fc1ad3a7c141092875313b046d5d0c04ce45",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    }
  ]
}