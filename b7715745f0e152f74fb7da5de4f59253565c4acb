{
  "comments": [
    {
      "key": {
        "uuid": "6c9414e0_9c0589ec",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-11-22T17:35:36Z",
      "side": 1,
      "message": "Feels like this can be integrated into StringToCode().",
      "revId": "b7715745f0e152f74fb7da5de4f59253565c4acb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0359a162_aa783199",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 7613
      },
      "writtenOn": "2019-11-22T19:47:06Z",
      "side": 1,
      "message": "The combination might get a bit long, but I agree there are some redundant checks here, like the branch on the initial \u0027\u003c\u0027 character, and only have one loop that scans over the string would be easier to read. Merging them together might make it more obvious what might make sense as a separate function.\n\nOne possible split might be a decimal and a hexadecimal path (since those have different validation rules), but there would still be common logic for things checking overflow. (Although for hexadecimal, an alternate implementation would be to just count characters...)",
      "parentUuid": "6c9414e0_9c0589ec",
      "revId": "b7715745f0e152f74fb7da5de4f59253565c4acb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d803b49e_9dea3e11",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 102,
      "author": {
        "id": 7613
      },
      "writtenOn": "2019-11-22T19:47:06Z",
      "side": 1,
      "message": "Since we\u0027re not actually decoding the UTF-16BE in this function (yet?), I would make a note that the highest valid UTF-16BE value is going to be encoded as DBFFDFFF (which is still less than std::numeric_limits\u003cuint32_t\u003e::max()). The 21 bit limit (maximum code point is U+10FFFF) only applies after decoding",
      "range": {
        "startLine": 102,
        "startChar": 32,
        "endLine": 102,
        "endChar": 39
      },
      "revId": "b7715745f0e152f74fb7da5de4f59253565c4acb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5b0e737_d8a07400",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 105,
      "author": {
        "id": 7613
      },
      "writtenOn": "2019-11-22T19:47:06Z",
      "side": 1,
      "message": "I would probably define this as a class-level constant, like kInvalidCode. Then you can check it easily from the call sites, without having to know this is defined as the max() value.\n\n(Also, for unsigned types, -1 converts to the max() value, but it\u0027s probably better to be explicit here, as you\u0027ve done.)",
      "revId": "b7715745f0e152f74fb7da5de4f59253565c4acb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46d4e0ad_b267bfbc",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-11-22T17:35:36Z",
      "side": 1,
      "message": "Easier to write FX_SAFE_UINT32",
      "range": {
        "startLine": 113,
        "startChar": 2,
        "endLine": 113,
        "endChar": 40
      },
      "revId": "b7715745f0e152f74fb7da5de4f59253565c4acb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad4abd10_60efa6e7",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 115,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-11-22T17:35:36Z",
      "side": 1,
      "message": "In this patch set isn\u0027t this always true?",
      "range": {
        "startLine": 115,
        "startChar": 34,
        "endLine": 115,
        "endChar": 55
      },
      "revId": "b7715745f0e152f74fb7da5de4f59253565c4acb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2de1dda5_cc4e5be7",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap_unittest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 7613
      },
      "writtenOn": "2019-11-22T19:47:06Z",
      "side": 1,
      "message": "Nit: This could be multiple tests, but each individual case is simple enough that this is probably OK.",
      "revId": "b7715745f0e152f74fb7da5de4f59253565c4acb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87a839a8_059ddbf5",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap_unittest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-11-22T17:35:36Z",
      "side": 1,
      "message": "Another good test case is \"\u003c00NN\u003e\".",
      "revId": "b7715745f0e152f74fb7da5de4f59253565c4acb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e2d2c8a_31ea7126",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap_unittest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 7613
      },
      "writtenOn": "2019-11-22T19:47:06Z",
      "side": 1,
      "message": "I would add a test for FFFFFFFF, too.\n\nAlso, it would be good to cover a few encoded UTF-16BE values that use surrogate pairs, like DBFFDFFF and D800DC00, as well as unpaired surrogates like D800-DBFF and DC00-DFFF (technically invalid, but good to have test coverage for).",
      "revId": "b7715745f0e152f74fb7da5de4f59253565c4acb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad4788b0_34d1936d",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap_unittest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 7613
      },
      "writtenOn": "2019-11-22T19:47:06Z",
      "side": 1,
      "message": "It seems like you\u0027ve tested this case twice.",
      "revId": "b7715745f0e152f74fb7da5de4f59253565c4acb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    }
  ]
}