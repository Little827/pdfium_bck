{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "49951586_c2345f56",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5495
      },
      "writtenOn": "2023-12-20T23:57:01Z",
      "side": 1,
      "message": "Daniel/Dana, as hinted, I\u0027d like to do the same in base/container/span.h",
      "revId": "bb89145c36492303134ec242f7d590e7218a131c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd121ec3_f09b82fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5625
      },
      "writtenOn": "2023-12-21T08:53:46Z",
      "side": 1,
      "message": "Several random thoughts:\n- is there a use case for this for converting from things other than byte spans (i.e. `span\u003cuint8_t\u003e`)?\n- should we somehow ensure that U and T match in const-ness, i.e. you can\u0027t use reinterpret_span to drop/add const?\n- should we dcheck/check that the size in bytes contains exactly s.size_bytes() / sizeof(T) elements, with no partial T?",
      "revId": "bb89145c36492303134ec242f7d590e7218a131c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2212d51_7500f93e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5495
      },
      "writtenOn": "2023-12-21T17:44:02Z",
      "side": 1,
      "message": "* Is there a use case? - yes, I hit this on the chromium side where converting a span of uint8_t to one of several types later on -- span of float, span of uint16_t, etc. looks really ugly.  And I wanted to be sure folks didn\u0027t have to manually divide by sizeof(T)\n\n* Should U\u0026T match in constness?  Good idea, will do.\n\n* Should s.size_bytes() mod sizeof(T) \u003d\u003d 0 ? I\u0027d be fine in documenting truncation as the behaviour, esp that we\u0027re not testing alignment neither.",
      "parentUuid": "cd121ec3_f09b82fe",
      "revId": "bb89145c36492303134ec242f7d590e7218a131c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92853495_91469556",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5495
      },
      "writtenOn": "2023-12-21T17:46:13Z",
      "side": 1,
      "message": "Oh, and starting from other than \u003cuint8_t\u003e ... we want to convert from  \u003cchar\u003e as well.  So maybe only single-byte types need be supported as input. But its likely simpler to allow any U/T combinations.",
      "parentUuid": "a2212d51_7500f93e",
      "revId": "bb89145c36492303134ec242f7d590e7218a131c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c7ec45f_97c6b9ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 9516
      },
      "writtenOn": "2024-01-02T16:22:25Z",
      "side": 1,
      "message": "I\u0027d prefer requiring exact bytes than implicitly truncate. The caller can truncate bytes by doing a subspan if needed.\n\nShould we check that the pointer is aligned correctly for alignof(Target)? Since this is coming from spans it seems super easy to do subspan(1) and then cast to some T. We saw UBSan catch this sometimes when we turned it on, and it\u0027d be nicer to catch it outside of sanitizers.",
      "parentUuid": "92853495_91469556",
      "revId": "bb89145c36492303134ec242f7d590e7218a131c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6537e1e8_424baa49",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5495
      },
      "writtenOn": "2024-01-02T17:49:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c7ec45f_97c6b9ac",
      "revId": "bb89145c36492303134ec242f7d590e7218a131c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    }
  ]
}