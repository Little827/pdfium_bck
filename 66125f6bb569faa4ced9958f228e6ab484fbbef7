{
  "comments": [
    {
      "key": {
        "uuid": "64ee058f_d02e783e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 12,
      "author": {
        "id": 5045
      },
      "writtenOn": "2020-03-19T02:54:13Z",
      "side": 1,
      "message": "There\u0027s not enough context to tell what this refers to exactly, or whether GetPageDictionary() is a standalone function, or if it belongs to a class. It may help to instead say \"which causes CPDF_Document to put the wrong but existing object number into its page list.\"",
      "range": {
        "startLine": 12,
        "startChar": 28,
        "endLine": 12,
        "endChar": 43
      },
      "revId": "66125f6bb569faa4ced9958f228e6ab484fbbef7",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1402d043_515e13a3",
        "filename": "core/fpdfapi/parser/cpdf_document.cpp",
        "patchSetId": 5
      },
      "lineNbr": 232,
      "author": {
        "id": 5045
      },
      "writtenOn": "2020-03-19T02:54:13Z",
      "side": 1,
      "message": "This check is not strict enough. In the PDF, the proper syntax is \"/Type /Page\". The significance of the slash in \"/Page\" is that it is a name object.\n\nCPDF_Dictionary::GetStringFor() calls GetString() for the CPDF_Object keyed at \"Type\". Here, both CPDF_Name and CPDF_String are potential CPDF_Object subclasses that can return the value \"Page\". We don\u0027t want to allow a CPDF_String when we want a CPDF_Name.",
      "range": {
        "startLine": 232,
        "startChar": 32,
        "endLine": 232,
        "endChar": 71
      },
      "revId": "66125f6bb569faa4ced9958f228e6ab484fbbef7",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfb6c47a_c2a26d0c",
        "filename": "core/fpdfapi/parser/cpdf_document.cpp",
        "patchSetId": 5
      },
      "lineNbr": 232,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-03-21T02:20:50Z",
      "side": 1,
      "message": "Done. Used CPDF_Name::IsName() for checking in the new patchset.",
      "parentUuid": "1402d043_515e13a3",
      "range": {
        "startLine": 232,
        "startChar": 32,
        "endLine": 232,
        "endChar": 71
      },
      "revId": "66125f6bb569faa4ced9958f228e6ab484fbbef7",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43a21fbf_40c62a5d",
        "filename": "core/fpdfapi/parser/cpdf_document.cpp",
        "patchSetId": 5
      },
      "lineNbr": 235,
      "author": {
        "id": 5045
      },
      "writtenOn": "2020-03-19T02:54:13Z",
      "side": 1,
      "message": "Instead of putting the wrong object number into |m_PageList|, and then adjusting for that here, can we just avoid putting the wrong object number into |m_PageList| in the first place? i.e. Do the check in CPDF_Document::LoadPages().",
      "revId": "66125f6bb569faa4ced9958f228e6ab484fbbef7",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f746c94a_aebfe0fc",
        "filename": "core/fpdfapi/parser/cpdf_document.cpp",
        "patchSetId": 5
      },
      "lineNbr": 235,
      "author": {
        "id": 5045
      },
      "writtenOn": "2020-03-19T04:27:36Z",
      "side": 1,
      "message": "To elaborate: By allowing |m_PageList| to contain the wrong object number in the first place, there may be other code that gets data from |m_PageList| that will take incorrect action based on the bad data. So we\u0027d either need to check in all the getters from |m_PageList| or all the setters to |m_PageList|. Some getters, e.g. CPDF_Document::IsPageLoaded() are const methods that can\u0027t make changes. So if we were to fix all the getters or all the setters, I would pick all the setters.\n\nFor the scope of this CL, we don\u0027t need to fix all the setters. Just the one that fixed the bug is sufficient. We can consider adding the same check to the other setters later.",
      "parentUuid": "43a21fbf_40c62a5d",
      "revId": "66125f6bb569faa4ced9958f228e6ab484fbbef7",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18c1d8d2_65c8537f",
        "filename": "core/fpdfapi/parser/cpdf_document.cpp",
        "patchSetId": 5
      },
      "lineNbr": 235,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-03-19T19:11:31Z",
      "side": 1,
      "message": "A fix like this might address crbug.com/1058366, too. Maybe we could focus on fixing that first, and then maybe this bug goes away, and we don\u0027t need to check in a separate test case for it? (Although that would be nice.)",
      "parentUuid": "f746c94a_aebfe0fc",
      "revId": "66125f6bb569faa4ced9958f228e6ab484fbbef7",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8bb6756_7250e8cf",
        "filename": "core/fpdfapi/parser/cpdf_document.cpp",
        "patchSetId": 5
      },
      "lineNbr": 235,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-03-20T00:46:11Z",
      "side": 1,
      "message": "Thanks Kahmy! The current fix does solve the rendering issue in crbug.com/1058366.\n \nI did another new fix https://pdfium-review.googlesource.com/c/pdfium/+/62750/13 (just a test CL, for you to see the changes, it will cause red bots) with comments and questions in the code. As Lei suggested, the new fix does the validation inside CPDF_Document::LoadPages(). If the check fails, go through the process as if there is no linearized header.\n\nThis new fix can render the PDF from crbug.com/1012237 correctly but it will fail the following unit test: cpdf_document_test.UseCachedPageObjNumIfHaveNotPagesDict. This test was added for issue https://codereview.chromium.org/2437773003/, which deliberately sets |m_PageList| with hint table data without validation for the page dictionary.\n\nBTW, the new fix doesn\u0027t solve the rendering issue in crbug.com/1058366.\n\nNeeds some input on some concerns:\n1. The unit test for https://codereview.chromium.org/2437773003/ seem to go the opposite direction as what we are trying to do. The test wants to load hint data without page dictionary (judging by the name of the test). We do not have the PDF file which that bug was originally filed for, and we don\u0027t know whether that PDF file actually has no valid Page objects (no valid pages? sounds like a rare thing to happen and I doubt that pdf can render). If I modify that unit test to have valid Page dictionary and make it test on loading the hint table, I am worried about this might cause future regression.\n\n2. If we are going to follow the path to add validation in CPDF_Document::LoadPages(), I think it will still be a good idea to add the page-type validation into CPDF_Document::GetPageDictionary() in a future CL, since it\u0027s been used for validation in a lot of callers.",
      "parentUuid": "18c1d8d2_65c8537f",
      "revId": "66125f6bb569faa4ced9958f228e6ab484fbbef7",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11f22a6e_916c4aa2",
        "filename": "core/fpdfapi/parser/cpdf_document.cpp",
        "patchSetId": 5
      },
      "lineNbr": 235,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-03-21T02:20:50Z",
      "side": 1,
      "message": "The new patch added the validation in CPDF_Document::LoadPages().\n\n@kmoon: With the new fix this CL no longer fixes the rendering result for crbug.com/1058366, since this fix is only affecting linearized PDFs with incorrect data, which is a different root cause for crbug.com/1058366.",
      "parentUuid": "a8bb6756_7250e8cf",
      "revId": "66125f6bb569faa4ced9958f228e6ab484fbbef7",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    }
  ]
}