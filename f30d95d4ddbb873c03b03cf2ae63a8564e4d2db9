{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2479836d_affb1518",
        "filename": "skia/config/SkUserConfig.h",
        "patchSetId": 1
      },
      "lineNbr": 256,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-03-28T21:19:52Z",
      "side": 1,
      "message": "This makes assumptions on the Skia implementation. An alternative would be to just have a SkDebugf() that ignores __VA_ARGS__ in MSVC builds. That would avoid making assumptions and make this section simpler, at the cost of not having good messages with SkDebugf() in MSVC builds. Most developers use Clang, so that\u0027s probably ok.",
      "revId": "f30d95d4ddbb873c03b03cf2ae63a8564e4d2db9",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9700bef_5ddd777b",
        "filename": "skia/config/SkUserConfig.h",
        "patchSetId": 1
      },
      "lineNbr": 258,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-03-28T21:19:52Z",
      "side": 1,
      "message": "Isn\u0027t this a repeat of line 138? Should we try to group the SkDebugf() definitions together, instead of putting two parts of it 100+ lines apart?",
      "revId": "f30d95d4ddbb873c03b03cf2ae63a8564e4d2db9",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5c982ad_cfe6ad3e",
        "filename": "skia/config/SkUserConfig.h",
        "patchSetId": 1
      },
      "lineNbr": 274,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-03-28T18:35:38Z",
      "side": 1,
      "message": "Chromium\u0027s skia/config/SkUserConfig.h does not bother with this check. Why does PDFium\u0027s skia/config/SkUserConfig.h need it?",
      "revId": "f30d95d4ddbb873c03b03cf2ae63a8564e4d2db9",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12fbbb5c_242f10bb",
        "filename": "skia/config/SkUserConfig.h",
        "patchSetId": 1
      },
      "lineNbr": 275,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-03-28T18:35:38Z",
      "side": 1,
      "message": "Consistently declare this after the #define, like in Chromium\u0027s skia/config/SkUserConfig.h, and on lines 258-259.",
      "revId": "f30d95d4ddbb873c03b03cf2ae63a8564e4d2db9",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "410566d7_0519c23b",
        "filename": "skia/ext/google_logging.cc",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 7620
      },
      "writtenOn": "2022-03-28T17:21:35Z",
      "side": 1,
      "message": "This is an equivalent to\n\n void SkAbort_FileLine(const char* file, int line, const char* format, ...) {\n  int severity \u003d logging::LOG_FATAL;\n\n  va_list ap;\n  va_start(ap, format);\n\n  std::string msg;\n  base::StringAppendV(\u0026msg, format, ap);\n  va_end(ap);\n\n  logging::LogMessage(file, line, severity).stream() \u003c\u003c msg;\n  sk_abort_no_print();\n  // Extra safety abort().\n  abort();\n} \n\nwhich exists for skia_revision \u003d \"c40158ab98b34dbab07f760e7a4c39e0290cd192\".",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 29,
        "endChar": 76
      },
      "revId": "f30d95d4ddbb873c03b03cf2ae63a8564e4d2db9",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    }
  ]
}