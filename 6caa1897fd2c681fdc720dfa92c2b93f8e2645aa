{
  "comments": [
    {
      "key": {
        "uuid": "4159bb71_0d4e648a",
        "filename": "core/fxge/skia/fx_skia_device.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1939,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-06-21T21:35:31Z",
      "side": 0,
      "message": "CFX_AggDeviceDriver::DrawPath() still checks for FX_ZEROAREA_FILL inside. With this removal, nothing in core/fxge/skia/fx_skia_device.cpp checks for FX_ZEROAREA_FILL any more. To me, that means either:\n\na) FX_ZEROAREA_FILL is completely useless.\nor\nb) Some code somewhere inside core/fxge/skia/fx_skia_device.cpp still needs to check for FX_ZEROAREA_FILL. Not sure where though.",
      "revId": "6caa1897fd2c681fdc720dfa92c2b93f8e2645aa",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99f86917_3e741af6",
        "filename": "core/fxge/skia/fx_skia_device.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1939,
      "author": {
        "id": 7620
      },
      "writtenOn": "2019-06-24T21:22:36Z",
      "side": 0,
      "message": "For Agg version, when (fill_mode \u0026 FX_ZEROAREA_FILL)\u003d\u003dtrue, pObject2Device\u003d\u003dnull. In that case, RasterizeStroke(\u0026rasterizer, \u0026path_data.m_PathData, nullptr, pGraphState, 1,false, !!(fill_mode \u0026 FX_STROKE_TEXT_MODE)) and RasterizeStroke(\u0026rasterizer, \u0026path_data.m_PathData, \u0026matrix2, pGraphState,matrix1.a, false, !!(fill_mode \u0026 FX_STROKE_TEXT_MODE)) will have the exact same result (since matrix1 and matrix2 are using default value a\u003d1, b\u003d0, c\u003d0, d\u003d1, e\u003d0, f\u003d0).\n\nAfter completely removing check for FX_ZEROAREA_FILL for Agg, I tested in testing/resources/pixel/ and testing/corpus/fx/path/ directories, and I didn\u0027t notice any difference between the new test results and the old results(with no agg changes).",
      "parentUuid": "4159bb71_0d4e648a",
      "revId": "6caa1897fd2c681fdc720dfa92c2b93f8e2645aa",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9be2a98a_65bc171b",
        "filename": "core/fxge/skia/fx_skia_device.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1939,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-06-28T01:36:26Z",
      "side": 0,
      "message": "So does that mean FX_ZEROAREA_FILL is not useful, and that the AGG code can just check |pObject2Device| instead?",
      "parentUuid": "99f86917_3e741af6",
      "revId": "6caa1897fd2c681fdc720dfa92c2b93f8e2645aa",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adee0e46_7f7867cd",
        "filename": "core/fxge/skia/fx_skia_device.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1939,
      "author": {
        "id": 7620
      },
      "writtenOn": "2019-07-02T00:12:44Z",
      "side": 0,
      "message": "When (fill_mode \u0026 FX_ZEROAREA_FILL)\u003d\u003dtrue, this doesn\u0027t guarantee pObject2Device\u003d\u003dnull. \n\nThe exception that pObject2Device !\u003d null will be horizontal/vertical line in the following format:\nstream\nq\n1 1 1 1 k\n100 100 m (point#1) \n100 100 l (point#2)\n200 100 l (point#3) \nh\nf\nQ\n\npoint#1 and #2 have to be exact the same and #3 has to have either the same x value or y value as point#1 and #2.\nUnder this special circumstance, completely skipping the (fill_mode \u0026 FX_ZEROAREA_FILL) check in agg will still result in the same rendering result.\n\nSo no matter pObject2Device is null or not, when completely skipping check for (fill_mode \u0026 FX_ZEROAREA_FILL), Agg ended up with the same rendering result.\n\nBut keeping the (fill_mode \u0026 FX_ZEROAREA_FILL) check does save some extra matrix calculation steps when pObject2Device\u003d\u003dnull, thus I haven\u0027t removed this check for Agg.",
      "parentUuid": "9be2a98a_65bc171b",
      "revId": "6caa1897fd2c681fdc720dfa92c2b93f8e2645aa",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    }
  ]
}