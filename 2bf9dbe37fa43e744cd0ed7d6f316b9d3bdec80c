{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9b59ae31_ba45d1dc",
        "filename": "third_party/freetype/roll-freetype.sh",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 5045
      },
      "writtenOn": "2023-04-17T20:38:07Z",
      "side": 1,
      "message": "WDYT about using mktemp to create the new file, like in Chromium\u0027s copy of roll-freetype.sh?",
      "revId": "2bf9dbe37fa43e744cd0ed7d6f316b9d3bdec80c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0dbb42ca_ef2f8a0f",
        "filename": "third_party/freetype/roll-freetype.sh",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 7613
      },
      "writtenOn": "2023-04-17T20:43:53Z",
      "side": 1,
      "message": "I think using mktemp would be worse in this scenario:\n\n1. We\u0027re unlikely to need multiple temporary files simultaneously, where mktemp really shines.\n2. mktemp creates the temporary file in TMPDIR (/tmp by default), which might not be ideal for a number of reasons.\n3. Not using a dynamic temporary name is more self-evidently correct.\n\nI have contemplated different names for the temporary file, though, such as one ending with ~ instead of \".new\". The main advantage there would be that our .gitignore excludes \"*~\" files already, but I\u0027m not sure if that\u0027s a good thing or not.",
      "parentUuid": "9b59ae31_ba45d1dc",
      "revId": "2bf9dbe37fa43e744cd0ed7d6f316b9d3bdec80c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "199bab99_66fca076",
        "filename": "third_party/freetype/roll-freetype.sh",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 7613
      },
      "writtenOn": "2023-04-17T20:45:29Z",
      "side": 1,
      "message": "Another consideration is that the \"mktemp\" command isn\u0027t standardized by POSIX, which takes away a bit from the idea of minimizing platform-specific differences.",
      "parentUuid": "0dbb42ca_ef2f8a0f",
      "revId": "2bf9dbe37fa43e744cd0ed7d6f316b9d3bdec80c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d5acba3_dd137643",
        "filename": "third_party/freetype/roll-freetype.sh",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 5045
      },
      "writtenOn": "2023-04-17T21:20:22Z",
      "side": 1,
      "message": "I was thinking it would be nice to not leave an extra file in the source tree if this line fails for some odd reason. But I think the odds of that are low.\n\nI wasn\u0027t too concerned about POSIX compatibility, as our targets are mainly Linux and macOS.",
      "parentUuid": "199bab99_66fca076",
      "revId": "2bf9dbe37fa43e744cd0ed7d6f316b9d3bdec80c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "2bf9dbe37fa43e744cd0ed7d6f316b9d3bdec80c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "2bf9dbe37fa43e744cd0ed7d6f316b9d3bdec80c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}