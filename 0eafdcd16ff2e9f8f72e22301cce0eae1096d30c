{
  "comments": [
    {
      "key": {
        "uuid": "030abcc9_9657de8c",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 23
      },
      "lineNbr": 77,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-01-09T20:36:10Z",
      "side": 1,
      "message": "Optional: Wondering if we could use ByteStringView.First()/.Last() instead. (These functions will return 0 if the string doesn\u0027t have a first/last character.) This also returns an unsigned value. I was looking for something like a \"starts with\"/\"ends with\" function or method.\n\nFirst/Last() will also return the same character for a 1 character string, but the condition wouldn\u0027t pass for that case anyway.",
      "revId": "0eafdcd16ff2e9f8f72e22301cce0eae1096d30c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5887c164_e32521cb",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 23
      },
      "lineNbr": 81,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-01-09T20:36:10Z",
      "side": 1,
      "message": "Optional: This function is simple enough that it probably doesn\u0027t matter, but it might be beneficial to take a subrange of the ByteStringView (which is cheap) and iterate over that, rather than doing arithmetic on the ranges. (This would also allow use of a ranged for loop.)",
      "revId": "0eafdcd16ff2e9f8f72e22301cce0eae1096d30c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9029cc3_dd01a617",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 23
      },
      "lineNbr": 81,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-01-10T18:22:35Z",
      "side": 1,
      "message": "Changed this section into something like:\n\n  ByteStringView hex_str \u003d str.Mid(1, len - 2);\n  for (char c : hex_str) {\n    if (!std::isxdigit(static_cast\u003cunsigned char\u003e(c)))\n      return pdfium::nullopt;\n\n    code \u003d code * 16 + FXSYS_HexCharToInt(c);\n    if (!code.IsValid())\n      return pdfium::nullopt;\n  }\n\ndhoss reminded me that there is a current discussion about changing the method name for ByteStringView::Mid(). But that should be just a simple fix in the future once the method name changes.\n\nIf we are going to use a subrange of the string here, we might as well change that in CPDF_ToUnicodeMap::StringToWideString() to keep it consistent.",
      "parentUuid": "5887c164_e32521cb",
      "revId": "0eafdcd16ff2e9f8f72e22301cce0eae1096d30c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ba31400_db28dd19",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 23
      },
      "lineNbr": 85,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-01-09T20:36:10Z",
      "side": 1,
      "message": "No action required: [i] and CharAt(i) only differ by the signedness of the result. Apparently, std::isxdigit() needs an unsigned char to work correctly (at least in theory), but it\u0027d be nice if these APIs somehow had fewer sharp edges...",
      "range": {
        "startLine": 85,
        "startChar": 42,
        "endLine": 85,
        "endChar": 55
      },
      "revId": "0eafdcd16ff2e9f8f72e22301cce0eae1096d30c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64162a59_a17fc7bb",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 23
      },
      "lineNbr": 90,
      "author": {
        "id": 5045
      },
      "writtenOn": "2020-01-09T20:30:40Z",
      "side": 1,
      "message": "Just use ValueOrDie() here.",
      "range": {
        "startLine": 90,
        "startChar": 41,
        "endLine": 90,
        "endChar": 55
      },
      "revId": "0eafdcd16ff2e9f8f72e22301cce0eae1096d30c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a7a01a7_2c1c8292",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 23
      },
      "lineNbr": 90,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-01-09T20:36:10Z",
      "side": 1,
      "message": "It\u0027s not possible for IsValid() to be false here, right? ValueOrDie() seems like it would make more sense. ValueOrDefault(0) implies there are situations where we\u0027d return 0 instead of a nullopt for an invalid value, which doesn\u0027t seem right.",
      "range": {
        "startLine": 90,
        "startChar": 41,
        "endLine": 90,
        "endChar": 55
      },
      "revId": "0eafdcd16ff2e9f8f72e22301cce0eae1096d30c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f1819dc_7b12b482",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 23
      },
      "lineNbr": 90,
      "author": {
        "id": 5045
      },
      "writtenOn": "2020-01-09T20:38:52Z",
      "side": 1,
      "message": "i.e. ValueOrDie() is safe because it\u0027s no actual risk of dying.",
      "parentUuid": "7a7a01a7_2c1c8292",
      "range": {
        "startLine": 90,
        "startChar": 41,
        "endLine": 90,
        "endChar": 55
      },
      "revId": "0eafdcd16ff2e9f8f72e22301cce0eae1096d30c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b731521_753206a9",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 23
      },
      "lineNbr": 90,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-01-10T18:22:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64162a59_a17fc7bb",
      "range": {
        "startLine": 90,
        "startChar": 41,
        "endLine": 90,
        "endChar": 55
      },
      "revId": "0eafdcd16ff2e9f8f72e22301cce0eae1096d30c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50dd12c6_1525bbb2",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 23
      },
      "lineNbr": 90,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-01-10T18:22:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8f1819dc_7b12b482",
      "range": {
        "startLine": 90,
        "startChar": 41,
        "endLine": 90,
        "endChar": 55
      },
      "revId": "0eafdcd16ff2e9f8f72e22301cce0eae1096d30c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a27bc54_0132a00a",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 23
      },
      "lineNbr": 151,
      "author": {
        "id": 5045
      },
      "writtenOn": "2020-01-09T20:30:40Z",
      "side": 1,
      "message": "Add a blank line after, like lines 147-148.",
      "revId": "0eafdcd16ff2e9f8f72e22301cce0eae1096d30c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2be2a5ae_c9b3e9b2",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 23
      },
      "lineNbr": 151,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-01-10T18:22:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a27bc54_0132a00a",
      "revId": "0eafdcd16ff2e9f8f72e22301cce0eae1096d30c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f393e8cb_acd3822e",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 23
      },
      "lineNbr": 162,
      "author": {
        "id": 5045
      },
      "writtenOn": "2020-01-09T20:30:40Z",
      "side": 1,
      "message": "WDYT of having |lowcode_str|, |lowcode_opt| and |lowcode|?",
      "range": {
        "startLine": 162,
        "startChar": 31,
        "endLine": 162,
        "endChar": 47
      },
      "revId": "0eafdcd16ff2e9f8f72e22301cce0eae1096d30c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d358498_1b058544",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 23
      },
      "lineNbr": 162,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-01-10T18:22:35Z",
      "side": 1,
      "message": "The code is definitely more readable this way. :D",
      "parentUuid": "f393e8cb_acd3822e",
      "range": {
        "startLine": 162,
        "startChar": 31,
        "endLine": 162,
        "endChar": 47
      },
      "revId": "0eafdcd16ff2e9f8f72e22301cce0eae1096d30c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a9a1064_c75fb817",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 23
      },
      "lineNbr": 191,
      "author": {
        "id": 5045
      },
      "writtenOn": "2020-01-09T20:30:40Z",
      "side": 1,
      "message": "Another potential issue, maybe to be addressed later: Can |value| overflow here?",
      "revId": "0eafdcd16ff2e9f8f72e22301cce0eae1096d30c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c9ab485_915b3824",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 23
      },
      "lineNbr": 191,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-01-10T18:22:35Z",
      "side": 1,
      "message": "Yes! |value| can definitely overflow here and the fuzzer for this function is not implemented yet. I can fix it in another CL so that this CL doesn\u0027t get too big.",
      "parentUuid": "7a9a1064_c75fb817",
      "revId": "0eafdcd16ff2e9f8f72e22301cce0eae1096d30c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45521021_123733e0",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap_unittest.cpp",
        "patchSetId": 23
      },
      "lineNbr": 12,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-01-09T20:37:08Z",
      "side": 1,
      "message": "Optional: This may or may not be a good time to adopt my EXPECT_THAT(x, Optional(y)) suggestion.",
      "revId": "0eafdcd16ff2e9f8f72e22301cce0eae1096d30c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab8f5f2d_bfa05b96",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap_unittest.cpp",
        "patchSetId": 23
      },
      "lineNbr": 12,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-01-10T18:22:35Z",
      "side": 1,
      "message": "Might as well give it a try!\n\nFor valid code string tests, they were changed into: \nEXPECT_THAT(CPDF_ToUnicodeMap::StringToCode(\"\u003c0001\u003e\"), testing::Optional(1u));\n\nFor the invalid string tests, I didn\u0027t change anything so far. But I did a test on this example:\nEXPECT_THAT(CPDF_ToUnicodeMap::StringToCode(\"\u003c\u003e\"), testing::Eq(pdfium::nullopt));\nIt works like a charm :D.",
      "parentUuid": "45521021_123733e0",
      "revId": "0eafdcd16ff2e9f8f72e22301cce0eae1096d30c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    }
  ]
}