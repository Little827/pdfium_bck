{
  "pushCert": "certificate version 0.1\npusher 5A66FD7B 1576631569 -0800\nnonce AC6AUtNsgLzW4MsECl5nVNsao89R53zYXCIQrlPbHVkHhXuDJ596cig1fBe6yCAWXMfvPiRT5JMV\n\n0000000000000000000000000000000000000000 a86a423213b90414c10353548e50f149eb9ef806 refs/for/refs/heads/master%wip,m\u003dInitial_upload,cc\u003dpdfium-reviews@googlegroups.com\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEE5k8iyLVP2jn8A19DqzYtYVpm/XsFAl35fREACgkQqzYtYVpm\n/XsDEgf/a+n+6s39XIJ6H8SMqr0LZ+AI9xOqARnWcyAjCADpt+4vMspYkRtBd1j3\nxfb8dZ5eOUAM+Rv6dyNGSrmGJC/0dnlwTLRz/N+aX0cHujNR3dMuVCKsab1aQTns\n8mvjwNvggIMESi/oa10/W9yuTr6iGVrs4uIII4K98XNuD+kGnhfoIDIZcGFAnc63\nLSGS95f1JQObRHfBEGOpc/ZGjKIlvoUd6NZI4TiFm67G5sYSx4S/8cTWbhsz4O6c\n39DKS9fX2zRAx6TSE/pUhnU2crZp+EgvNG1zv9zTCUmK16WkWOLvR8ZIxAvvA9ML\n/bvmZWGml0HfQm/kynJnFQ0bD89F3Q\u003d\u003d\n\u003dwbRh\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "304ff2a2_effffd78",
        "filename": "core/fxcrt/fx_system.h",
        "patchSetId": 1
      },
      "lineNbr": 173,
      "author": {
        "id": 5495
      },
      "writtenOn": "2019-12-18T17:42:03Z",
      "side": 1,
      "message": "My feeling is this should take a const uint8_t* as an argument, because we might want to pick up a misalgined field from a buffer without first having to load it into a uint16_t lvalue.\n\nnit: FXSYS_GetUint16LSBFirst()\nnit: I\u0027d declare this |inline| function and implement it in the header to ensure debug builds don\u0027t crawl along.",
      "range": {
        "startLine": 173,
        "startChar": 32,
        "endLine": 173,
        "endChar": 44
      },
      "revId": "a86a423213b90414c10353548e50f149eb9ef806",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91ed3e0e_9d41225b",
        "filename": "core/fxcrt/fx_system.h",
        "patchSetId": 1
      },
      "lineNbr": 173,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-12-18T20:11:45Z",
      "side": 1,
      "message": "I really like avoiding casting in the callers, but I see Chromium\u0027s base::ReadBigEndian() takes a pointer too. So I suppose we can do it that way. But now I\u0027m also tempted to copy base::ReadBigEndian() ...",
      "parentUuid": "304ff2a2_effffd78",
      "range": {
        "startLine": 173,
        "startChar": 32,
        "endLine": 173,
        "endChar": 44
      },
      "revId": "a86a423213b90414c10353548e50f149eb9ef806",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dd1276c_9e9931ec",
        "filename": "core/fxcrt/fx_system.h",
        "patchSetId": 1
      },
      "lineNbr": 173,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-12-19T03:27:52Z",
      "side": 1,
      "message": "OTOH, a bunch of functions in base/sys_byteorder.h takes the unsigned int values...\n\nAre you worried the misaligned buffer case may cause poor performance?",
      "parentUuid": "91ed3e0e_9d41225b",
      "range": {
        "startLine": 173,
        "startChar": 32,
        "endLine": 173,
        "endChar": 44
      },
      "revId": "a86a423213b90414c10353548e50f149eb9ef806",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c48f1e1_675c10f0",
        "filename": "core/fxcrt/fx_system.h",
        "patchSetId": 1
      },
      "lineNbr": 173,
      "author": {
        "id": 5495
      },
      "writtenOn": "2019-12-19T17:06:29Z",
      "side": 1,
      "message": "On some processors of yore (sparc, mips etc), you\u0027d get an alignment fault and execution stops akin to a segv. Since this code is working around architectural differences, it would be a shame if it introduced further restrictions on architectures that it supports.",
      "parentUuid": "2dd1276c_9e9931ec",
      "range": {
        "startLine": 173,
        "startChar": 32,
        "endLine": 173,
        "endChar": 44
      },
      "revId": "a86a423213b90414c10353548e50f149eb9ef806",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    }
  ]
}