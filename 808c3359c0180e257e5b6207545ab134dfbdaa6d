{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3691a743_e4fc9640",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7620
      },
      "writtenOn": "2023-03-16T22:53:59Z",
      "side": 1,
      "message": "A stepping stone to fix test cases that when image component number doesn\u0027t align with colorspace channel number.",
      "revId": "808c3359c0180e257e5b6207545ab134dfbdaa6d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "206b1bde_e361fa73",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7613
      },
      "writtenOn": "2023-03-16T23:06:56Z",
      "side": 1,
      "message": "Aren\u0027t the various /SMaskInData cases covered by bug_1469.in?",
      "parentUuid": "3691a743_e4fc9640",
      "revId": "808c3359c0180e257e5b6207545ab134dfbdaa6d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31c57879_28cab156",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7620
      },
      "writtenOn": "2023-03-16T23:22:16Z",
      "side": 1,
      "message": "bug_1469 only covers SRGB color space. And our code only handles SMaskInData for that specific colorspace right now. For other colorspace types, this field is completely ignored.\n\nThis new test can help prevent regression once I fix everything else (such as garbage rendering, or image not rendering issue) except for SMask and serves as a stepping stone, since there is no one-step fix that can fix any jpxdecode*.in right now.",
      "parentUuid": "206b1bde_e361fa73",
      "revId": "808c3359c0180e257e5b6207545ab134dfbdaa6d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11a19930_cecfcfb2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7613
      },
      "writtenOn": "2023-03-16T23:25:00Z",
      "side": 1,
      "message": "Would it make sense to extend bug_1469.in, then, or replace it entirely? Or should bug_1469.in still focus on all the /SMaskInData cases? (absent/0/1/2)",
      "parentUuid": "31c57879_28cab156",
      "revId": "808c3359c0180e257e5b6207545ab134dfbdaa6d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5688b6dc_472acaa6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7620
      },
      "writtenOn": "2023-03-17T00:00:03Z",
      "side": 1,
      "message": "I think we need to do the following 2 things:\n\n(1) Extend bug_1469.in, make sure to cover some weird non-zero values for /SMaskInData, such as 2, -1 (PDF ref says  \"If SMaskInData is nonzero, there must be only one opacity channel in the JPEG2000 data and it must apply to all color channels.\"). This will be done in a separate CL.\n\n(2) In this new pixel test, make sure SMask is not used for cases that component number doesn\u0027t match color channel number. This helps us to get one step closer to fix the exiting 2 jpxdecode*.in tests. I agree that non-alpha cases can be removed from this newly added pixel test. On a second thought, rename this test to \"jpxdecode_unsed_smask.in\" would be better, since the image contains smask info and the PDF decides to not use it.",
      "parentUuid": "11a19930_cecfcfb2",
      "revId": "808c3359c0180e257e5b6207545ab134dfbdaa6d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c01016c2_719edd4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7620
      },
      "writtenOn": "2023-03-17T00:18:13Z",
      "side": 1,
      "message": "I did some testing on the SMaskInData value in Acrobat (I use T or F to indicate if SMask is used):\n1.1 F\n1.09 T\n1 T\n0.6~0.9 T\n0.5 F\n-1 F\n\nAcrobat definitely has its own acceptable range.",
      "parentUuid": "5688b6dc_472acaa6",
      "revId": "808c3359c0180e257e5b6207545ab134dfbdaa6d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "949a47ab_b0dc8191",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7613
      },
      "writtenOn": "2023-03-17T16:09:54Z",
      "side": 1,
      "message": "The spec only defines meanings for /SMaskInData 0, 1, and 2. The only things it says about non-zero values is that /SMask shouldn\u0027t be specified, and that the JPEG 2000 should have a single opacity channel. (Elsewhere, it says /SMaskInData itself means /SMask shouldn\u0027t be specified; either way, we can just ignore any /SMask entry.)\n\nCrucially, it doesn\u0027t say how the opacity channel should be used if using a value other than 1 or 2. Whatever a particular implementation does is meaningless.\n\nSo I don\u0027t think there\u0027s any need to test values other than absent, 0, 1, or 2, since they don\u0027t have any semantics in the spec (other than the ones noted above). Let\u0027s leave bug_1469.in alone; the only change I would make is adding support for /SMaskInData 2 (when we fix that issue), and maybe a couple nonsense values like 3 or -1 (and treat it like 0, except ignoring /SMask).",
      "parentUuid": "c01016c2_719edd4b",
      "revId": "808c3359c0180e257e5b6207545ab134dfbdaa6d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed483cb8_f000bc4e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7620
      },
      "writtenOn": "2023-03-17T17:39:40Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "949a47ab_b0dc8191",
      "revId": "808c3359c0180e257e5b6207545ab134dfbdaa6d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2120d7dd_293e5d15",
        "filename": "testing/resources/pixel/jpxdecode_without_smask.in",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 7613
      },
      "writtenOn": "2023-03-16T23:25:00Z",
      "side": 1,
      "message": "The non-alpha cases don\u0027t seem useful in this file.",
      "revId": "808c3359c0180e257e5b6207545ab134dfbdaa6d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a20065bf_c846e69f",
        "filename": "testing/resources/pixel/jpxdecode_without_smask.in",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 7620
      },
      "writtenOn": "2023-03-17T00:00:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2120d7dd_293e5d15",
      "revId": "808c3359c0180e257e5b6207545ab134dfbdaa6d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    }
  ]
}