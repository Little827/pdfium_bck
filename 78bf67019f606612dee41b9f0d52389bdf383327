{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6315cf95_ce2cb0ab",
        "filename": "core/fxge/skia/fx_skia_device.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2737,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-09-13T07:42:27Z",
      "side": 1,
      "message": "Instead of adding a new parameter, why not just adjust the `options` argument the callers pass in to properly set `sampling_options`?",
      "revId": "78bf67019f606612dee41b9f0d52389bdf383327",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e98af16_df413437",
        "filename": "core/fxge/skia/fx_skia_device.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2737,
      "author": {
        "id": 7620
      },
      "writtenOn": "2022-09-13T16:45:02Z",
      "side": 1,
      "message": "Do you mean adding an element to struct FXDIB_ResampleOptions?\n\nFXDIB_ResampleOptions is used by AGG, SkiaPaths and Skia and all of its attributes come from parsing the PDF. `optimize_sampling_option` is for Skia only and it does not directly come reading the PDF. This was a main reason that I added a new parameter for it.\n\nIf we want to move it into FXDIB_ResampleOptions, one way to do it is that we add `optimize_sampling_option` into FXDIB_ResampleOptions but keep it guarded by _SKIA_SUPPORT_. So that we can avoid adding unused attributes for AGG and SkiaPaths.\n\nWDYT?",
      "parentUuid": "6315cf95_ce2cb0ab",
      "revId": "78bf67019f606612dee41b9f0d52389bdf383327",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0ab807f_9b20d9cd",
        "filename": "core/fxge/skia/fx_skia_device.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2737,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-09-13T20:41:47Z",
      "side": 1,
      "message": "But SetDIBits() calls StartDIBitsSkia() and its FXDIB_ResampleOptions is default-constructed. That FXDIB_ResampleOptions does not come from parsing the PDF. If values in that FXDIB_ResampleOptions changes, that\u0027s an implementation detail.\n\nFXDIB_ResampleOptions does not need an additional field. It just has to be set in a way that StartDIBitsSkia() will behave as desired. i.e. Turn the existing knobs already available to get to the desired state, instead of adding a new knob.",
      "parentUuid": "2e98af16_df413437",
      "revId": "78bf67019f606612dee41b9f0d52389bdf383327",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d23c40d_d928e874",
        "filename": "core/fxge/skia/fx_skia_device.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2737,
      "author": {
        "id": 7620
      },
      "writtenOn": "2022-09-14T07:26:37Z",
      "side": 1,
      "message": "I will use `bNoSmoothing` as the knob in the new patchsest.",
      "parentUuid": "d0ab807f_9b20d9cd",
      "revId": "78bf67019f606612dee41b9f0d52389bdf383327",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9dd4eac1_bea6b126",
        "filename": "core/fxge/skia/fx_skia_device.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2737,
      "author": {
        "id": 7620
      },
      "writtenOn": "2022-09-14T17:55:12Z",
      "side": 1,
      "message": "In the new patchset, the locally constructed FXDIB_ResampleOptions will have `bNoSmoothing` set to true to prevent the sampling options switching to linear.\n\nStartDIBits() will be the only place that calls StartDIBitsSkia() and possibly trigger the sampling option switch.",
      "parentUuid": "1d23c40d_d928e874",
      "revId": "78bf67019f606612dee41b9f0d52389bdf383327",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d75fe4d_07e5287a",
        "filename": "core/fxge/skia/fx_skia_device.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2779,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-09-13T07:42:27Z",
      "side": 1,
      "message": "I don\u0027t understand the calculations here. For instance, if `matrix` is the identity matrix, then the dest size is 1x1? This size result does not make sense to me.",
      "revId": "78bf67019f606612dee41b9f0d52389bdf383327",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "deff943c_87b005fe",
        "filename": "core/fxge/skia/fx_skia_device.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2779,
      "author": {
        "id": 7620
      },
      "writtenOn": "2022-09-13T17:19:57Z",
      "side": 1,
      "message": "For AGG and Skia, the `dest_width` and `dest_height` comes from the parameter `dest_width` and `dest_height` for CFX_ImageStretcher ctor.\nThese widths and height were from a rect calculated from matrix.GetUnitRect().\n\nIf `matrix` is an identity matrix, then matrix.GetUnitRect() will return a rect that\u0027s 1x1.",
      "parentUuid": "7d75fe4d_07e5287a",
      "revId": "78bf67019f606612dee41b9f0d52389bdf383327",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ad53f4b_999d9ded",
        "filename": "core/fxge/skia/fx_skia_device.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2779,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-09-13T20:41:47Z",
      "side": 1,
      "message": "Thanks for the context. So the next question is, why do this instead of calling `matrix.GetUnitRect()`?",
      "parentUuid": "deff943c_87b005fe",
      "revId": "78bf67019f606612dee41b9f0d52389bdf383327",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6e323ee_3e253e57",
        "filename": "core/fxge/skia/fx_skia_device.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2779,
      "author": {
        "id": 7620
      },
      "writtenOn": "2022-09-14T02:23:51Z",
      "side": 1,
      "message": "The inspiration comes from CFX_ImageTransformer ctor (See [1]) where AGG and SkiaPaths does some simplified calculation to get the `dest_height` and `dest_width`. Besides the simplified calculation, the most generic way to calculate the image rectangle width and height was to do the sqrt operation.\n\nSince SkCanvas::drawImageRect() takes the image rect as it is rather than doing the GetUnitRect().GetClosesetRect() like AGG (which the image rect will look bigger), I think Skia does not have to follow the exact scale up operation as AGG.\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:third_party/pdfium/core/fxge/dib/cfx_imagetransformer.cpp;drc\u003d3111d4025e2ed2450600445a7207ef22bb03a12f;l\u003d177",
      "parentUuid": "9ad53f4b_999d9ded",
      "revId": "78bf67019f606612dee41b9f0d52389bdf383327",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19c84887_af67c729",
        "filename": "core/fxge/skia/fx_skia_device.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2779,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-09-15T01:16:17Z",
      "side": 1,
      "message": "I looked at CFX_ImageStretcher ctor calls and see several ways of calculating these values:\n\n1) matrix.GetUnitRect().GetClosestRect();\n2) matrix.GetUnitRect().GetOuterRect();\n3) sqrt operations\n4) Actually having a provide rect to stretch into.\n\nIgnoring (4), comparing the rest, I see for the matrix [11.2, 11.2, 0, 11.2, 0, 0], (1) and (2) returns 12x23, while (3) returns 16x12. Given this discrepancy, which is actually correct?",
      "parentUuid": "d6e323ee_3e253e57",
      "revId": "78bf67019f606612dee41b9f0d52389bdf383327",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45a51f2d_af833fb5",
        "filename": "core/fxge/skia/fx_skia_device.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2779,
      "author": {
        "id": 7620
      },
      "writtenOn": "2022-09-16T05:02:49Z",
      "side": 1,
      "message": "Simply choosing 1 or 2 is not going to work as it\u0027s proved to cause regression when it comes to image stretch:\n\noption 3)sqrt is used for image transforming, calculating stretch_width and stretch_height, which is a regular use case\n\nExample 1: testing/resources/rotated_image.pdf, in which [30, 30, 40, -40] returns 43 x 57;\nExample 2: testing/resources/pixel/image_transformer_other.in, [-16, 64, 64, 0] returns 66 x 64)\n\noption 1,2 can be used for directly rendering a rectangular image. They work all the time if the image is not \"twisted\", but it will cause \"twisted\" image such as example 2 to have regression as the rectangle area is not as tight or even the longer side is on a different direction.\n\noption 3 does not cause any regression in our existing tests.\n\nI will see whether I can create any rect that matrix.b, matrix.c are not 0 and still trigger the ImageRenderer rendering paths instead of the ImageTransforming rendering path, then I will post the update here.\n\nMy current guess is: a combination of option 3 and option 1 would be a good choice for Skia since Skia renders the bitmap using its original dimensions, which usually results in rendering a tighter rectangle area compared to AGG.",
      "parentUuid": "19c84887_af67c729",
      "revId": "78bf67019f606612dee41b9f0d52389bdf383327",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    }
  ]
}