{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5688333d_6f98c0da",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 5045
      },
      "writtenOn": "2023-04-28T21:52:36Z",
      "side": 1,
      "message": "Does CPDFAnnotListTest need to hold on to this CPDF_Dictionary? Same question for `page_dict_`.",
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7235338f_c6a5c97d",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 7613
      },
      "writtenOn": "2023-04-28T22:17:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5688333d_6f98c0da",
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4aaa9ad_f5d27edf",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 5045
      },
      "writtenOn": "2023-04-28T21:52:36Z",
      "side": 1,
      "message": "Can GetRawContents() and GetDecodedContents() just return ByteString?",
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e92e5d9_bac9926c",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 5045
      },
      "writtenOn": "2023-04-28T21:56:39Z",
      "side": 1,
      "message": "Or at least GetDecodedContents()?",
      "parentUuid": "a4aaa9ad_f5d27edf",
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbd77410_8c8dde0d",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 7613
      },
      "writtenOn": "2023-04-28T22:17:01Z",
      "side": 1,
      "message": "GetDecodedContents() is used in UTF-8 string expectations, so I don\u0027t think ByteString makes sense there.\n\nGoogleTest doesn\u0027t know how to print ByteString, so we just get the ugly default output. If we add custom printers for ByteString/WideString, I think returning ByteString would be fine, but I didn\u0027t want to tackle that in this change.",
      "parentUuid": "1e92e5d9_bac9926c",
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed8a8147_fad6d8bd",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 5045
      },
      "writtenOn": "2023-04-28T22:25:05Z",
      "side": 1,
      "message": "WideString::ToUTF8() returns a ByteString , so it should be fine to use here.\n\nTeaching GoogleTest to pretty-print ByteString would be nice. Definitely something to do in another CL, but that shouldn\u0027t force this CL to use std::string.",
      "parentUuid": "cbd77410_8c8dde0d",
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2efec2e_c3bd8031",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 7613
      },
      "writtenOn": "2023-04-28T22:31:05Z",
      "side": 1,
      "message": "If I want to do EXPECT_EQ(\"UTF-8 text\", actual) (which I do), GoogleTest requires \"actual\" to be a std::string (or something like it). I\u0027m not sure how avoiding returning std::string from GetDecodedContents() helps.\n\nCan you provide an example of the change you want to make? (I don\u0027t think we have suggested edits yet, unfortunately.)",
      "parentUuid": "ed8a8147_fad6d8bd",
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94450fe4_8e8754ab",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 5045
      },
      "writtenOn": "2023-04-28T22:37:56Z",
      "side": 1,
      "message": "I changed GetDecodedContents() to:\n\n```\nByteString GetDecodedContents(const CPDF_Annot* annotation) {\n  return annotation-\u003eGetAnnotDict()-\u003eGetUnicodeTextFor(\n      pdfium::annotation::kContents).ToUTF8();\n}\n```\n\nAnd it compiled locally. Aside from the pretty-print issue, `EXPECT_EQ(\"foo_str\", bytestring_var)` seems to work.",
      "parentUuid": "f2efec2e_c3bd8031",
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0eaa5025_dfb83254",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 7613
      },
      "writtenOn": "2023-04-28T22:46:55Z",
      "side": 1,
      "message": "If I deliberately introduce an error, I get this error message with the `ByteString` version:\n\n```\nExpected equality of these values:\n  \"xAaä€\"\n    Which is: 0x56022b9f2c84\n  GetDecodedContents(list.GetAt(1))\n    Which is: { \u0027A\u0027 (65, 0x41), \u0027a\u0027 (97, 0x61), \u0027\\xC3\u0027 (195), \u0027\\xA4\u0027 (164), \u0027\\xE2\u0027 (226), \u0027\\x82\u0027 (130), \u0027\\xAC\u0027 (172) }\n```\n\nAnd this error message with the `std::string` version:\n\n```\nExpected equality of these values:\n  \"xAaä€\"\n    Which is: \"xAa\\xC3\\xA4\\xE2\\x82\\xAC\"\n    As Text: \"xAaä€\"\n  GetDecodedContents(list.GetAt(1))\n    Which is: \"Aa\\xC3\\xA4\\xE2\\x82\\xAC\"\n    As Text: \"Aaä€\"\n```\n\nI\u0027m assuming the `ByteString` version works because `ByteString` has an implicit conversion from `const char*`, but that means the \"generic\" `EXPECT_EQ()` implementation gets selected, instead of the prettier `std::string` version.\n\nI can switch everything to `ByteString` if you\u0027d prefer that over the prettier error messages, but I personally wouldn\u0027t make that trade-off in test-only code.",
      "parentUuid": "94450fe4_8e8754ab",
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29609a6a_ddcaeab1",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 5045
      },
      "writtenOn": "2023-04-28T22:52:36Z",
      "side": 1,
      "message": "Yes, I\u0027d prefer we land this CL with ByteString, and then pretty-print ByteString for GoogleTest later.\n\nByteString is used in lots of tests, so prettifying it will benefit many test cases. While using std::string in this test makes this test print better messages, it does not help other existing tests.",
      "parentUuid": "0eaa5025_dfb83254",
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2ebc04f_15be2533",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 7613
      },
      "writtenOn": "2023-04-28T23:44:48Z",
      "side": 1,
      "message": "Done\n\nI\u0027d prefer migrate this test in the future when ByteString/WideString has better testing support, than vice versa, as it makes this test worse now for a hypothetical future improvement.",
      "parentUuid": "29609a6a_ddcaeab1",
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "590e4a8e_b64bfd7c",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 5045
      },
      "writtenOn": "2023-04-29T00:56:50Z",
      "side": 1,
      "message": "It\u0027s only worse when the test fails, but it\u0027s probably not going to fail? On the happy path, there\u0027s no difference.\n\nThe hypothetical future can become the near future: https://pdfium-review.googlesource.com/106690",
      "parentUuid": "e2ebc04f_15be2533",
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6ead985_d616beec",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 7613
      },
      "writtenOn": "2023-05-04T19:08:30Z",
      "side": 1,
      "message": "Even after adding a PrintTo() for ByteString/WideString, I\u0027m wondering if we\u0027ll still have the issue with printing the string as a pointer instead of a string.",
      "parentUuid": "590e4a8e_b64bfd7c",
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39b0ccad_347d1228",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 7613
      },
      "writtenOn": "2023-05-04T19:08:46Z",
      "side": 1,
      "message": "The expected string, that is.",
      "parentUuid": "c6ead985_d616beec",
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18691268_26b46bfd",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 5045
      },
      "writtenOn": "2023-05-05T21:04:44Z",
      "side": 1,
      "message": "Do you have a specific case in mind?",
      "parentUuid": "39b0ccad_347d1228",
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6b57076_0e146d50",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 7613
      },
      "writtenOn": "2023-05-05T21:06:57Z",
      "side": 1,
      "message": "The example from earlier in this thread demonstrates the issue:\n\n```\nExpected equality of these values:\n  \"xAaä€\"\n    Which is: 0x56022b9f2c84\n  GetDecodedContents(list.GetAt(1))\n    Which is: { \u0027A\u0027 (65, 0x41), \u0027a\u0027 (97, 0x61), \u0027\\xC3\u0027 (195), \u0027\\xA4\u0027 (164), \u0027\\xE2\u0027 (226), \u0027\\x82\u0027 (130), \u0027\\xAC\u0027 (172) }\n```\n\nAdding a PrintTo() fixes the second part (which prints the string as a collection), but it doesn\u0027t fix the first part (0x56022b9f2c84). For example, imagine the expected value was a constant or other expression, instead of a literal.",
      "parentUuid": "18691268_26b46bfd",
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3685858_773caa12",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 5045
      },
      "writtenOn": "2023-05-05T21:12:36Z",
      "side": 1,
      "message": "I\u0027m not seeing the problem. I reverted this CL locally, and applied patch set 7. Then I made this test fail by changing the expectation. The gtest output is:\n\n```\n[ RUN      ] CPDFAnnotListTest.CreatePopupAnnot_Pdf\n../../core/fpdfdoc/cpdf_annotlist_unittest.cpp:87: Failure\nExpected equality of these values:\n  \"Aaä€1\"\n    Which is: \"Aa\\xC3\\xA4\\xE2\\x82\\xAC\" \"1\"\n    As Text: \"Aaä€1\"\n  GetDecodedContents(list.GetAt(1))\n    Which is: \"Aa\\xC3\\xA4\\xE2\\x82\\xAC\"\n    As Text: \"Aaä€\"\n```",
      "parentUuid": "c6b57076_0e146d50",
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8480084d_47057491",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 5045
      },
      "writtenOn": "2023-04-28T21:52:36Z",
      "side": 1,
      "message": "No underscores?",
      "range": {
        "startLine": 79,
        "startChar": 26,
        "endLine": 79,
        "endChar": 46
      },
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77f55a30_6988ad1f",
        "filename": "core/fpdfdoc/cpdf_annotlist_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 7613
      },
      "writtenOn": "2023-04-28T22:17:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8480084d_47057491",
      "range": {
        "startLine": 79,
        "startChar": 26,
        "endLine": 79,
        "endChar": 46
      },
      "revId": "2949dd331f29e6911956f43968e47ec60bee7b56",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    }
  ]
}