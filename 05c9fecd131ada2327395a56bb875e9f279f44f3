{
  "comments": [
    {
      "key": {
        "uuid": "92ff82c4_b813017d",
        "filename": "fpdfsdk/fpdf_annot_embeddertest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2442,
      "author": {
        "id": 7659
      },
      "writtenOn": "2020-04-09T15:13:17Z",
      "side": 1,
      "message": "We need to call FORM_ForceToKillFocus() after every block like this.\n\nI was looking at FORM_SetFocusedAnnot() API and found a small issue in this test. The API is supposed to set focus to an annotation and if the annotation is already focused, it will return true.\n\nWhen we used FORM_SetFocusedAnnot() to set focus to an annotation in the previous block, the widget annotation was focused. Now when we clear all focusable types and then try setting focus to annotations, for widget FORM_SetFocusedAnnot() would return true because it\u0027s the current focused annotation.\n\nThis test didn\u0027t see this issue because we have a bug on FPDF_ANNOT_WIDGET being focusable by default.",
      "range": {
        "startLine": 2433,
        "startChar": 2,
        "endLine": 2442,
        "endChar": 3
      },
      "revId": "05c9fecd131ada2327395a56bb875e9f279f44f3",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24041c35_1971f3f0",
        "filename": "fpdfsdk/fpdf_annot_embeddertest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2442,
      "author": {
        "id": 7659
      },
      "writtenOn": "2020-04-09T17:30:31Z",
      "side": 1,
      "message": "When i think about this some more it seems we are not handling multiple FPDFAnnot_SetFocusableSubtypes() calls correctly. \n\nGiven that list of focusable annotations can be modified at any point, how do we ensure that the current focused annotation is handled properly.\n\nIf FPDF_ANNOT_WIDGET is focusable right now and a text field X is in focus and the list of focusable annotations is updated to include FPDF_ANNOT_LINK, then what happens to X, should it remain in focus or is the focus killed? \nIn case of the switch where FPDF_ANNOT_WIDGET was focusable before but is no longer focusable. What happens to X? It should lose focus, but who kills the focus?\n\nWho owns the responsibility of handling this? Should PDFium be responsible for it or should the embedder handle this?\n\nMy suggestion is to kill focus when list of focusable annotations are updated and the current focused annotation type is not in the list.",
      "parentUuid": "92ff82c4_b813017d",
      "range": {
        "startLine": 2433,
        "startChar": 2,
        "endLine": 2442,
        "endChar": 3
      },
      "revId": "05c9fecd131ada2327395a56bb875e9f279f44f3",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd84d141_51e43314",
        "filename": "fpdfsdk/fpdf_annot_embeddertest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2442,
      "author": {
        "id": 5045
      },
      "writtenOn": "2020-04-09T23:36:36Z",
      "side": 1,
      "message": "It sounds reasonable that calling FPDFAnnot_SetFocusableSubtypes() kills focus if the call makes the currently focused annotation ineligible to receive focus. Want to file a bug for that?\n\nFor Chromium\u0027s use case, this is not a concern because their PDFium integration code will only call FPDFAnnot_SetFocusableSubtypes() once around initialization time. However, from the PDFium perspective, there is nothing preventing these APIs from interacting like this. So it would be good to address them.",
      "parentUuid": "24041c35_1971f3f0",
      "range": {
        "startLine": 2433,
        "startChar": 2,
        "endLine": 2442,
        "endChar": 3
      },
      "revId": "05c9fecd131ada2327395a56bb875e9f279f44f3",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    }
  ]
}