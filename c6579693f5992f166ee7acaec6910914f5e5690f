{
  "comments": [
    {
      "key": {
        "uuid": "77f54019_851ed2f3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-01-02T17:53:18Z",
      "side": 1,
      "message": "\"Sting\" -\u003e \"String\"",
      "range": {
        "startLine": 7,
        "startChar": 7,
        "endLine": 7,
        "endChar": 12
      },
      "revId": "c6579693f5992f166ee7acaec6910914f5e5690f",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78539778_fa6db140",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-01-06T17:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77f54019_851ed2f3",
      "range": {
        "startLine": 7,
        "startChar": 7,
        "endLine": 7,
        "endChar": 12
      },
      "revId": "c6579693f5992f166ee7acaec6910914f5e5690f",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6706cdde_22e33b09",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-01-02T17:53:18Z",
      "side": 1,
      "message": "Optional: I might use \"character codes\" instead of \"code values\", to be more consistent with the PDF specification.",
      "range": {
        "startLine": 11,
        "startChar": 21,
        "endLine": 11,
        "endChar": 32
      },
      "revId": "c6579693f5992f166ee7acaec6910914f5e5690f",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2c82fc1_6fbc77a2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-01-06T17:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6706cdde_22e33b09",
      "range": {
        "startLine": 11,
        "startChar": 21,
        "endLine": 11,
        "endChar": 32
      },
      "revId": "c6579693f5992f166ee7acaec6910914f5e5690f",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aecddaad_e709bc4d",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-01-02T17:53:18Z",
      "side": 1,
      "message": "Note: You probably can replace this with pdfium::make_optional(), but it won\u0027t help that much after you switch the type of \"result\" from uint32_t, so I probably wouldn\u0027t bother.",
      "range": {
        "startLine": 84,
        "startChar": 9,
        "endLine": 84,
        "endChar": 35
      },
      "revId": "c6579693f5992f166ee7acaec6910914f5e5690f",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1c1ba4c_a9885746",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-01-02T17:57:41Z",
      "side": 1,
      "message": "Actually, you could just omit the constructor call entirely, and you should get the implicit conversion. Then when you change the type of \"result\" to FX_SAFE_UINT32 later, it\u0027ll be more obvious to the reviewer that something changed.",
      "parentUuid": "aecddaad_e709bc4d",
      "range": {
        "startLine": 84,
        "startChar": 9,
        "endLine": 84,
        "endChar": 35
      },
      "revId": "c6579693f5992f166ee7acaec6910914f5e5690f",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09ec6201_3704e68e",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-01-06T17:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1c1ba4c_a9885746",
      "range": {
        "startLine": 84,
        "startChar": 9,
        "endLine": 84,
        "endChar": 35
      },
      "revId": "c6579693f5992f166ee7acaec6910914f5e5690f",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c272cf11_6daa62ba",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-01-02T17:53:18Z",
      "side": 1,
      "message": "To minimize behavioral changes in this CL, consider using \"code.value_or(0)\" to continue treating StringToCode() as if it returned 0 for errors (instead of nullopt).\n\nIt doesn\u0027t look like we have test coverage for HandleBeginBFChar(), so this isn\u0027t detectable currently. Let\u0027s make sure to add some sooner or later.",
      "range": {
        "startLine": 145,
        "startChar": 6,
        "endLine": 145,
        "endChar": 12
      },
      "revId": "c6579693f5992f166ee7acaec6910914f5e5690f",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46ec0d42_11bafb28",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-01-06T17:23:58Z",
      "side": 1,
      "message": "Since the whole range of uint32_t should be available as valid code as the CL\u0027s description states, I think I will avoid using 0 for indicating errors. Or else it will lose the purpose of changing the return type of StringToCode().\n\nI will have adding test coverage for HandleBeginBFChar() in my backlog and have a separate CL for it.",
      "parentUuid": "c272cf11_6daa62ba",
      "range": {
        "startLine": 145,
        "startChar": 6,
        "endLine": 145,
        "endChar": 12
      },
      "revId": "c6579693f5992f166ee7acaec6910914f5e5690f",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9db711a0_0cb8dfa2",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-01-06T20:19:16Z",
      "side": 1,
      "message": "The idea here is that:\n\n1. The current behavior is broken in this (rare) case.\n2. This change shouldn\u0027t necessarily fix the broken behavior, as fixing the behavior is, itself, a separate change.\n3. You want to avoid grouping unrelated behavior changes in a single change, since it can make pinpointing any unanticipated problems more difficult.\n\nI\u0027ll leave it up to you and your other reviewer if this warrants being broken up into a separate change. :-) It\u0027s maybe small enough not to worry about.",
      "parentUuid": "46ec0d42_11bafb28",
      "range": {
        "startLine": 145,
        "startChar": 6,
        "endLine": 145,
        "endChar": 12
      },
      "revId": "c6579693f5992f166ee7acaec6910914f5e5690f",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17d5b8ab_c9e844e3",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-01-06T21:30:53Z",
      "side": 1,
      "message": "If we only want to change the return type without changing any behavior of the process, I think I will use code.value_or(0) to replace everywhere that\u0027s doing a \"if (!code)\" check.",
      "parentUuid": "9db711a0_0cb8dfa2",
      "range": {
        "startLine": 145,
        "startChar": 6,
        "endLine": 145,
        "endChar": 12
      },
      "revId": "c6579693f5992f166ee7acaec6910914f5e5690f",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a58c3b9a_167ec76a",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-01-06T21:55:50Z",
      "side": 1,
      "message": "Yep, that was the idea. I might have checked with Lei first (in case he disagreed), but it looks like you\u0027ve already done the work.",
      "parentUuid": "17d5b8ab_c9e844e3",
      "range": {
        "startLine": 145,
        "startChar": 6,
        "endLine": 145,
        "endChar": 12
      },
      "revId": "c6579693f5992f166ee7acaec6910914f5e5690f",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "852c1cc8_ffe39176",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 2
      },
      "lineNbr": 166,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-01-02T17:53:18Z",
      "side": 1,
      "message": "Because the names are so similar, it\u0027s difficult to keep track of the difference between low_code/lowcode, and high/high_code/highcode. Can you make these names more distinct?\n\nFor example, instead of using low_code/high_code (which we\u0027ll use a lot less than lowcode/highcode), I might replace these names with something longer that makes it clear they\u0027re optionals. (\"parsed_lowcode\", say, or \"maybe_lowcode\", or \"lowcode_or_error\", or even \"optional_lowcode\", although that last one gets a bit too close to encoding the type into the variable name.)",
      "range": {
        "startLine": 166,
        "startChar": 25,
        "endLine": 166,
        "endChar": 32
      },
      "revId": "c6579693f5992f166ee7acaec6910914f5e5690f",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3303db62_c2680cd1",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.cpp",
        "patchSetId": 2
      },
      "lineNbr": 166,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-01-06T17:23:58Z",
      "side": 1,
      "message": "Thanks for the suggestion! Ended up using |highcode_or_error| and |lowcode_or_error| since they can indicate errors. :D",
      "parentUuid": "852c1cc8_ffe39176",
      "range": {
        "startLine": 166,
        "startChar": 25,
        "endLine": 166,
        "endChar": 32
      },
      "revId": "c6579693f5992f166ee7acaec6910914f5e5690f",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    }
  ]
}