{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ab3bf5d6_c696ba44",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 8736
      },
      "writtenOn": "2021-12-06T21:35:01Z",
      "side": 1,
      "message": "Fixed review requests",
      "revId": "8cf0bdaa04f3b0cd920f269661d374ca4befd6bb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ff47a8e_630c5165",
        "filename": "testing/fuzzers/pdf_xfa_raw_fuzzer.cc",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 5045
      },
      "writtenOn": "2021-12-06T21:43:59Z",
      "side": 1,
      "message": "So this is used to check all the angle brackets as a whole are balanced. In which case, sample input such as \"\u003c\u003cfoo\u003e\u003c\u003e\u003c\u003e\u003e\" will be considered valid. What do you think about a simple state machine to check that after an open angle bracket, the next angle bracket should be a close angle bracket, and one after that is open, and so on? Would that be a better filter?",
      "revId": "8cf0bdaa04f3b0cd920f269661d374ca4befd6bb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cd7b6ba_3e3f32b3",
        "filename": "testing/fuzzers/pdf_xfa_raw_fuzzer.cc",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 8736
      },
      "writtenOn": "2021-12-06T22:15:19Z",
      "side": 1,
      "message": "Yeah I think that\u0027s a great idea. I also added to ensure now that there is content between the brackets",
      "parentUuid": "4ff47a8e_630c5165",
      "revId": "8cf0bdaa04f3b0cd920f269661d374ca4befd6bb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf2f56c0_1cc14343",
        "filename": "testing/fuzzers/pdf_xfa_raw_fuzzer.cc",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 8736
      },
      "writtenOn": "2021-12-06T22:17:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2cd7b6ba_3e3f32b3",
      "revId": "8cf0bdaa04f3b0cd920f269661d374ca4befd6bb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94561880_3c6db40f",
        "filename": "testing/fuzzers/pdf_xfa_raw_fuzzer.cc",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 5045
      },
      "writtenOn": "2021-12-06T21:43:59Z",
      "side": 1,
      "message": "Should this check for \"\u003cscript\" instead?",
      "revId": "8cf0bdaa04f3b0cd920f269661d374ca4befd6bb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "421490aa_f9c2c327",
        "filename": "testing/fuzzers/pdf_xfa_raw_fuzzer.cc",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 8736
      },
      "writtenOn": "2021-12-06T22:15:19Z",
      "side": 1,
      "message": "I am happy to leave it as it",
      "parentUuid": "94561880_3c6db40f",
      "revId": "8cf0bdaa04f3b0cd920f269661d374ca4befd6bb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24fa644f_d77bd122",
        "filename": "testing/fuzzers/pdf_xfa_raw_fuzzer.cc",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 5045
      },
      "writtenOn": "2021-12-06T22:27:33Z",
      "side": 1,
      "message": "I\u0027m curious why though. This is going to throw away some valid cases. The comment here does a good job of explaining what the intention is, but there\u0027s a discrepency in the implementation. It may be helpful to add a comment to explain why it is implemented this way.",
      "parentUuid": "421490aa_f9c2c327",
      "revId": "8cf0bdaa04f3b0cd920f269661d374ca4befd6bb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "613089b9_37e3c9a3",
        "filename": "testing/fuzzers/pdf_xfa_raw_fuzzer.cc",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 8736
      },
      "writtenOn": "2021-12-06T22:39:51Z",
      "side": 1,
      "message": "What I had in mind was whether e.g. \"\u003c    script\" or other whitespace might influence tag recognition, i.e. would rather over-approximate the filtering. Another option is cases where \"Javascript\" or something like that are used to instantiate a script - notice I am not as much into the pdfium code or PDF in general, so I am not fully into the details of what will create a script. \n\nAre there any specific valid cases where avoiding anything with \"script\" will backfire in a serious way? For example, if it will only backfire in cases where \"script\" can be substitute for something else, e.g. a name of something, then I am happy to keep the over-approximated filtering.",
      "parentUuid": "24fa644f_d77bd122",
      "revId": "8cf0bdaa04f3b0cd920f269661d374ca4befd6bb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d20526a_35651145",
        "filename": "testing/fuzzers/pdf_xfa_raw_fuzzer.cc",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 5045
      },
      "writtenOn": "2021-12-06T23:28:08Z",
      "side": 1,
      "message": "Thanks for the explanation. I can certainly accept that a fuzzer has some limitations and will occasionally reject valid fuzzing data.\n\nFrom your last fuzzer, I see \"scriptModel\" as the one tag that will get scripted. I haven\u0027t looked at the specs closely to see what else will get skipped.",
      "parentUuid": "613089b9_37e3c9a3",
      "revId": "8cf0bdaa04f3b0cd920f269661d374ca4befd6bb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa7880e0_6feb6daa",
        "filename": "testing/fuzzers/pdf_xfa_raw_fuzzer.cc",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 8736
      },
      "writtenOn": "2021-12-06T23:39:50Z",
      "side": 1,
      "message": "Sounds good, let\u0027s leave it as it is then. I will continue to keep an eye on coverage and observe if any tags are missed in the coverage reports!",
      "parentUuid": "0d20526a_35651145",
      "revId": "8cf0bdaa04f3b0cd920f269661d374ca4befd6bb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4edcb783_ed66c55d",
        "filename": "testing/fuzzers/pdf_xfa_raw_fuzzer.cc",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 8736
      },
      "writtenOn": "2021-12-06T23:40:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa7880e0_6feb6daa",
      "revId": "8cf0bdaa04f3b0cd920f269661d374ca4befd6bb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3726379_9d38be7e",
        "filename": "testing/fuzzers/pdf_xfa_raw_fuzzer.cc",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 5045
      },
      "writtenOn": "2021-12-07T00:11:05Z",
      "side": 1,
      "message": "SGTM. Can you add a brief comment in the code to summarize this discussion?",
      "parentUuid": "4edcb783_ed66c55d",
      "revId": "8cf0bdaa04f3b0cd920f269661d374ca4befd6bb",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    }
  ]
}