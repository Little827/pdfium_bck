{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7b433365_18cbc91b",
        "filename": "core/fxcrt/fx_string.h",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 5045
      },
      "writtenOn": "2023-12-11T22:44:02Z",
      "side": 1,
      "message": "Until now, PDFium has avoided using std::string / std::wstring / std::u16string in its non-test code. Should this return WideString instead to keep it that way?",
      "revId": "76a26983ec255294ab1e6fe32a97b1d1162b9b5c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5b8903a_dec03ce0",
        "filename": "core/fxcrt/fx_string.h",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 5475
      },
      "writtenOn": "2023-12-12T00:35:09Z",
      "side": 1,
      "message": "is there a reason for this avoidance?\n\nWideString does not have an implicit trailing nul char. ToUTF16() adds an explicit one, which I find mildly offensive (since it\u0027s not part of WideString contents normally, and it makes it not symmetric with FromUTF16). So I thought I\u0027d use u16string and switch the callers that want the trailing nul to it, since that makes that use case work nicely.\n\nIf you don\u0027t like that, I\u0027m happy to revert this cl.",
      "parentUuid": "7b433365_18cbc91b",
      "revId": "76a26983ec255294ab1e6fe32a97b1d1162b9b5c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c10a1d5b_e70ee291",
        "filename": "core/fxcrt/fx_string.h",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 5475
      },
      "writtenOn": "2023-12-12T16:46:09Z",
      "side": 1,
      "message": "Here\u0027s an example of the kind of thing that\u0027s easier if there\u0027s some explicit UTF16 string type: https://pdfium-review.googlesource.com/c/pdfium/+/114750",
      "parentUuid": "e5b8903a_dec03ce0",
      "revId": "76a26983ec255294ab1e6fe32a97b1d1162b9b5c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d51a8c5f_d2f669a1",
        "filename": "core/fxcrt/fx_string.h",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 5045
      },
      "writtenOn": "2023-12-12T18:07:52Z",
      "side": 1,
      "message": "See the comment at the top of bytestring.h / widestring.h re: CoW. If PDFium starts using std::string and ByteString, then developers are going to need guidance on when to use what.\n\nI believe WideString does have a trailing NUL. Otherwise, how can WideString::c_str() simply return its data? https://pdfium.googlesource.com/pdfium.git/+/cb1cd2f12898d7cdc0d9435be2244ce27f88afe3/core/fxcrt/widestring.h#79\n\nI don\u0027t think this CL needs to be reverted. Just reworked to not use std::u16string.",
      "parentUuid": "c10a1d5b_e70ee291",
      "revId": "76a26983ec255294ab1e6fe32a97b1d1162b9b5c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d7b04e5_99e92020",
        "filename": "core/fxcrt/fx_string.h",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 5475
      },
      "writtenOn": "2023-12-12T19:47:56Z",
      "side": 1,
      "message": "It\u0027s not starting to use std::string, it\u0027s starting to use std::u16string, for which it doesn\u0027t have its own type. So I\u0027m not sure if u16string causes confusion.\n\nSomething like https://pdfium-review.googlesource.com/c/pdfium/+/114750 is only possible if there\u0027s a string type that\u0027s guaranteed to be UTF-16. PDFium currently doesn\u0027t have such a string type. Do you want me to add one and use that instead of u16string?\n\nRe:\n\n```\n// A mutable string with shared buffers using copy-on-write semantics that\n// avoids the cost of std::string\u0027s iterator stability guarantees.\n```\n\nHas this cost been quantified? Chrome uses std::string types. If they\u0027re expensive, we should probably stop doing that (?)",
      "parentUuid": "d51a8c5f_d2f669a1",
      "revId": "76a26983ec255294ab1e6fe32a97b1d1162b9b5c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4965fedc_2ddc3120",
        "filename": "core/fxcrt/fx_string.h",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 5045
      },
      "writtenOn": "2023-12-12T19:59:45Z",
      "side": 1,
      "message": "re: CoW - doesn\u0027t Blink have its own string types for similar reasons? I don\u0027t have concrete measurements about strings, but for from recent memory, crbug.com/1477279 is a case where I forgot to use CoW correctly in PDFium for other data types, and it lead to 55 GB of memory usage for a 25 MB PDF.",
      "parentUuid": "2d7b04e5_99e92020",
      "revId": "76a26983ec255294ab1e6fe32a97b1d1162b9b5c",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    }
  ]
}