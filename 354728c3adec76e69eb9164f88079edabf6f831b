{
  "comments": [
    {
      "key": {
        "uuid": "9568c030_bb5beed3",
        "filename": "fxjs/gc/container_trace.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 5045
      },
      "writtenOn": "2020-09-03T00:09:01Z",
      "side": 1,
      "message": "Follow-up: Should we do a bit more template magic to combine the list/set/vector versions?",
      "revId": "354728c3adec76e69eb9164f88079edabf6f831b",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0a368a8_b1017e10",
        "filename": "fxjs/gc/container_trace.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 5495
      },
      "writtenOn": "2020-09-03T16:03:44Z",
      "side": 1,
      "message": "Indeed.  Additionally, if we provide a template for Member\u003cT\u003e and recursively invoke ContainerTrace(), then we can automatically handle things like\n  vector\u003cmap\u003cint, list\u003cMember\u003c\u003e\u003e\u003e m_Complicated;\n\nThe question becomes what to call it since it no longer would apply to containers, and plain old Trace() is too generic, and fxgc::Trace() has colons in it, and FXGCTrace() is just ugly and TraceTemplate() includes an unimportant implementation detail, and TommyTrace() would likely be rejected, and ...",
      "parentUuid": "9568c030_bb5beed3",
      "revId": "354728c3adec76e69eb9164f88079edabf6f831b",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd476001_60352dc0",
        "filename": "fxjs/gc/container_trace.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 5495
      },
      "writtenOn": "2020-09-03T16:15:07Z",
      "side": 1,
      "message": "Re: combining.  OTOH, STL containers won\u0027t work with cppgc without the egregious hacks like kNoConservativeStackScan, so we might want to ensure that only a well-vetted set of containers interoperate with these templates.  So I think I\u0027m going to keep the separate for the moment, i.e., supporting range-based for loops shouldn\u0027t be good enough.  OTTH, I might define the vector one in terms of spans, so that anything that silently converts to a span (e.g., vetctor, foo[32]) would work.",
      "parentUuid": "a0a368a8_b1017e10",
      "revId": "354728c3adec76e69eb9164f88079edabf6f831b",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    }
  ]
}