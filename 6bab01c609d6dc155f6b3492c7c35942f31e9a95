{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f99d21e8_5e001099",
        "filename": "fxjs/xfa/cfxjse_formcalc_context.cpp",
        "patchSetId": 1
      },
      "lineNbr": 680,
      "author": {
        "id": 5495
      },
      "writtenOn": "2023-10-12T21:35:49Z",
      "side": 1,
      "message": "Hmmm. Maybe we can make WideString deduce this length? This is advantage of std::string_view, which can.",
      "range": {
        "startLine": 680,
        "startChar": 51,
        "endLine": 680,
        "endChar": 54
      },
      "revId": "6bab01c609d6dc155f6b3492c7c35942f31e9a95",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14ddbc8b_30d0e3eb",
        "filename": "fxjs/xfa/cfxjse_formcalc_context.cpp",
        "patchSetId": 1
      },
      "lineNbr": 680,
      "author": {
        "id": 5495
      },
      "writtenOn": "2023-10-12T21:38:42Z",
      "side": 1,
      "message": "NM, it can\u0027t do it either, probably ambiguity about including the final \\0.",
      "parentUuid": "f99d21e8_5e001099",
      "range": {
        "startLine": 680,
        "startChar": 51,
        "endLine": 680,
        "endChar": 54
      },
      "revId": "6bab01c609d6dc155f6b3492c7c35942f31e9a95",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd297786_3a9aea9b",
        "filename": "fxjs/xfa/cfxjse_formcalc_context.cpp",
        "patchSetId": 1
      },
      "lineNbr": 680,
      "author": {
        "id": 5495
      },
      "writtenOn": "2023-10-12T21:44:14Z",
      "side": 1,
      "message": "One other thought. If we want to be really sneaky, maybe we use aggreggate initialization and omit the [3] and let the compiler figure it out.  Though this means duplicating a bit, e.g.\n\n```\n  const wchar_t encode_buffer[] \u003d {\u0027%\u0027, kStrCode[iIndex], kStrCode[ch - iIndex * 16]};\n   wsResultBuf \u003c\u003c WideStringView(encode_buffer, sizeof(encode_buffer));\n ```",
      "parentUuid": "14ddbc8b_30d0e3eb",
      "range": {
        "startLine": 680,
        "startChar": 51,
        "endLine": 680,
        "endChar": 54
      },
      "revId": "6bab01c609d6dc155f6b3492c7c35942f31e9a95",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a4b33f6_64a3fcc4",
        "filename": "fxjs/xfa/cfxjse_formcalc_context.cpp",
        "patchSetId": 1
      },
      "lineNbr": 680,
      "author": {
        "id": 5045
      },
      "writtenOn": "2023-10-12T21:54:16Z",
      "side": 1,
      "message": "Makes me want to use a span instead.",
      "parentUuid": "dd297786_3a9aea9b",
      "range": {
        "startLine": 680,
        "startChar": 51,
        "endLine": 680,
        "endChar": 54
      },
      "revId": "6bab01c609d6dc155f6b3492c7c35942f31e9a95",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "6bab01c609d6dc155f6b3492c7c35942f31e9a95",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "6bab01c609d6dc155f6b3492c7c35942f31e9a95",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}