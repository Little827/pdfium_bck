{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "80e2964f_1b732d51",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5495
      },
      "writtenOn": "2021-12-13T18:00:18Z",
      "side": 1,
      "message": "Thanks! A couple of questions, though.",
      "revId": "b5ae3a87d337deb4d9bda6285e2599f591e69428",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68956a43_2075e9e7",
        "filename": "third_party/base/check.h",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 5495
      },
      "writtenOn": "2021-12-13T18:00:18Z",
      "side": 1,
      "message": "How does this affect an ordinary ASAN build?  When building a shared library, for example, how does the compiler know if it is going to wind up as part of a fuzzer or just part of an asanified chrome binary?\n\nI think we might be better off going to an ud2 instruction even though it costs one byte more than the int3 for all cases if int3 isn\u0027t sufficient.  Alternatively, there might be a best practice from the CF folks who have yet to respond.\n\nEither way, the place to conditionalize it probably would be in the IMMEDIATE_CRASH definition itself.",
      "range": {
        "startLine": 14,
        "startChar": 7,
        "endLine": 14,
        "endChar": 47
      },
      "revId": "b5ae3a87d337deb4d9bda6285e2599f591e69428",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81e1ef58_cbd7d2da",
        "filename": "third_party/base/check.h",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 8736
      },
      "writtenOn": "2021-12-13T18:07:24Z",
      "side": 1,
      "message": "This is unrelated to ASAN builds, but rather fuzzing builds, so \"use_libfuzzer: true\". This is a macro offered by the libfuzzer code (in LLVM) itself: https://llvm.org/docs/LibFuzzer.html#id34",
      "parentUuid": "68956a43_2075e9e7",
      "range": {
        "startLine": 14,
        "startChar": 7,
        "endLine": 14,
        "endChar": 47
      },
      "revId": "b5ae3a87d337deb4d9bda6285e2599f591e69428",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86100791_cfd9e252",
        "filename": "third_party/base/check.h",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 8736
      },
      "writtenOn": "2021-12-13T18:08:05Z",
      "side": 1,
      "message": "This link is better: https://llvm.org/docs/LibFuzzer.html#fuzzer-friendly-build-mode",
      "parentUuid": "81e1ef58_cbd7d2da",
      "range": {
        "startLine": 14,
        "startChar": 7,
        "endLine": 14,
        "endChar": 47
      },
      "revId": "b5ae3a87d337deb4d9bda6285e2599f591e69428",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05365a04_49ec7ff2",
        "filename": "third_party/base/check.h",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 8736
      },
      "writtenOn": "2021-12-13T18:28:37Z",
      "side": 1,
      "message": "I just tried using ud2 instead of int3 and that works okay. One issue is that the stack trace seems to not show the actual function where the ud2 is issued but rather one the caller of the function where the ud2 is issued, which might complicate root-cause analysis. For this reason I would probably prefer a solution with abort() in fuzzing modes.",
      "parentUuid": "86100791_cfd9e252",
      "range": {
        "startLine": 14,
        "startChar": 7,
        "endLine": 14,
        "endChar": 47
      },
      "revId": "b5ae3a87d337deb4d9bda6285e2599f591e69428",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e58a4a42_82264e17",
        "filename": "third_party/base/check.h",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 5495
      },
      "writtenOn": "2021-12-13T18:37:10Z",
      "side": 1,
      "message": "Problem is that CF also runs pdfium_test and chrome binaries, which may or may not be built from the same build as the one that specified use_libfuzzer\u003dtrue. So we\u0027d want something that works for all of these.  In particular, the IMMEDIATE_CRASH code originates in chrome\u0027s repository, and we just copy it into pdfium\u0027s standalone repository.  So we\u0027d need to update chrome as well. It would be really bad if chrome, as shipped, were just silently exiting here without triggering the crash reporting logic. So we need a little bit more investigation before we just hammer it with the big hammer of abort().",
      "parentUuid": "05365a04_49ec7ff2",
      "range": {
        "startLine": 14,
        "startChar": 7,
        "endLine": 14,
        "endChar": 47
      },
      "revId": "b5ae3a87d337deb4d9bda6285e2599f591e69428",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "daf56051_ef10e1c0",
        "filename": "third_party/base/check.h",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 8736
      },
      "writtenOn": "2021-12-13T18:43:04Z",
      "side": 1,
      "message": "Ah interesting. Then, this must mean that all failed CHECKs in Chromium will not be found by CF?",
      "parentUuid": "e58a4a42_82264e17",
      "range": {
        "startLine": 14,
        "startChar": 7,
        "endLine": 14,
        "endChar": 47
      },
      "revId": "b5ae3a87d337deb4d9bda6285e2599f591e69428",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4383e633_0f3c6a02",
        "filename": "third_party/base/check.h",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 5045
      },
      "writtenOn": "2021-12-13T19:49:09Z",
      "side": 1,
      "message": "I\u0027m not sure how well Chromium deals with CHECKs when fuzzing. It may be best to sort that out first, since PDFium tends to copy from Chromium when it comes to its third_party/base code.",
      "parentUuid": "daf56051_ef10e1c0",
      "range": {
        "startLine": 14,
        "startChar": 7,
        "endLine": 14,
        "endChar": 47
      },
      "revId": "b5ae3a87d337deb4d9bda6285e2599f591e69428",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    }
  ]
}