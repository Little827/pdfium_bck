{
  "comments": [
    {
      "key": {
        "uuid": "a8b41ff6_0c52fdbc",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 17,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T19:16:25Z",
      "side": 1,
      "message": "I wouldn\u0027t prefix these, since they\u0027re fully-qualified later anyway. Alternately, I wouldn\u0027t have a class, and just leave them bare.",
      "range": {
        "startLine": 17,
        "startChar": 2,
        "endLine": 17,
        "endChar": 8
      },
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "318333f9_97e9f447",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 23,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T19:16:25Z",
      "side": 1,
      "message": "Exceptions should be used for exceptional conditions (like errors), not normal control flow. (One might argue the \"NotFoundError\" also falls in the same category, although I think that\u0027s a bit more defensible.)\n\nCan maybe justify this on the basis that this code currently uses exceptions as return values, rather than actually raising them. But it feels like maybe these shouldn\u0027t even use Exception as a base class in that case...",
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df26a5cb_027e40e6",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 95,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T19:16:25Z",
      "side": 1,
      "message": "Instead of all this logic, can\u0027t we just iterate over expected_paths? Aren\u0027t the paths in the right order already?",
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c187107_b43bb84f",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 178,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T19:16:25Z",
      "side": 1,
      "message": "These are just integer comparisons; it\u0027s misleading to use \"is\" (object identity) comparison here. I would just use \u003d\u003d.",
      "range": {
        "startLine": 178,
        "startChar": 12,
        "endLine": 178,
        "endChar": 14
      },
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "158662b4_dd9a45b1",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 182,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T19:16:25Z",
      "side": 1,
      "message": "Seems like the \"else\" condition should be an error, rather than just defaulting to CHECK_SKIAPATHS.",
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7365173_4a6fc1cb",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 193,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T19:16:25Z",
      "side": 1,
      "message": "Could make platform\u003dNone by default, and then you can just drop this parameter.",
      "range": {
        "startLine": 193,
        "startChar": 56,
        "endLine": 193,
        "endChar": 60
      },
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bbef95e_e972eb32",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 200,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T19:16:25Z",
      "side": 1,
      "message": "Given the repetition of code, it seems like all of this work could just be done in _GetExpectedTemplate(); you don\u0027t really need GetExpectedPAthByCheckMode()/GetPlatformExpectedPathByCheckMode(). The only real benefit is clarity of naming, which I think is very minor in this case.",
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "985b8d8d_fd33ef32",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 202,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T19:16:25Z",
      "side": 1,
      "message": "Would it make sense to set this in the constructor instead? Does it vary across a single instance of this class?\n\nThis would also allow you to keep pregenerating the expected paths. (In fact, it looks like the only thing that really varies is the page number.)",
      "range": {
        "startLine": 202,
        "startChar": 45,
        "endLine": 202,
        "endChar": 57
      },
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    }
  ]
}