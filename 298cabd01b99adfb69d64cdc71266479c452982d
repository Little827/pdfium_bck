{
  "comments": [
    {
      "key": {
        "uuid": "a8b41ff6_0c52fdbc",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 17,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T19:16:25Z",
      "side": 1,
      "message": "I wouldn\u0027t prefix these, since they\u0027re fully-qualified later anyway. Alternately, I wouldn\u0027t have a class, and just leave them bare.",
      "range": {
        "startLine": 17,
        "startChar": 2,
        "endLine": 17,
        "endChar": 8
      },
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "430a8577_0ec7791c",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 17,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-04-06T22:25:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a8b41ff6_0c52fdbc",
      "range": {
        "startLine": 17,
        "startChar": 2,
        "endLine": 17,
        "endChar": 8
      },
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "318333f9_97e9f447",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 23,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T19:16:25Z",
      "side": 1,
      "message": "Exceptions should be used for exceptional conditions (like errors), not normal control flow. (One might argue the \"NotFoundError\" also falls in the same category, although I think that\u0027s a bit more defensible.)\n\nCan maybe justify this on the basis that this code currently uses exceptions as return values, rather than actually raising them. But it feels like maybe these shouldn\u0027t even use Exception as a base class in that case...",
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be0a580c_a79d5da0",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 23,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-04-06T22:25:38Z",
      "side": 1,
      "message": "Create a new class for FindMatchStatus instead of using exception to handle the return value of  _FindMatchProcessStatus().",
      "parentUuid": "318333f9_97e9f447",
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df26a5cb_027e40e6",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 95,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T19:16:25Z",
      "side": 1,
      "message": "Instead of all this logic, can\u0027t we just iterate over expected_paths? Aren\u0027t the paths in the right order already?",
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5e9ad1e_310afbf7",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 95,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-04-06T22:25:38Z",
      "side": 1,
      "message": "Iterate over all expected_paths was the original implementation for this CL. But we want to implement the logic of checking the build config so that we can avoid checking extra paths when skia/skiapaths is not enabled, and this will also help us notice the cases that if non-skia/non-skiapaths results end up matching expected results which doesn\u0027t match their build configs.",
      "parentUuid": "df26a5cb_027e40e6",
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b94d4d6d_8b306c6e",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 95,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T22:37:30Z",
      "side": 1,
      "message": "But that\u0027s already handled in PathTemplates.GetExpectedPaths()?\n\nI don\u0027t understand the problem that\u0027s being solved. Do you have an example of when there would be a path returned by GetExpectedPaths() that we would exclude here?",
      "parentUuid": "c5e9ad1e_310afbf7",
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c56043f6_f4e6bab4",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 95,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-04-07T01:49:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b94d4d6d_8b306c6e",
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c187107_b43bb84f",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 178,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T19:16:25Z",
      "side": 1,
      "message": "These are just integer comparisons; it\u0027s misleading to use \"is\" (object identity) comparison here. I would just use \u003d\u003d.",
      "range": {
        "startLine": 178,
        "startChar": 12,
        "endLine": 178,
        "endChar": 14
      },
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3519f0e_882ecdc9",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 178,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-04-06T22:25:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c187107_b43bb84f",
      "range": {
        "startLine": 178,
        "startChar": 12,
        "endLine": 178,
        "endChar": 14
      },
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "158662b4_dd9a45b1",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 182,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T19:16:25Z",
      "side": 1,
      "message": "Seems like the \"else\" condition should be an error, rather than just defaulting to CHECK_SKIAPATHS.",
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdf67350_d7097594",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 182,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-04-06T22:25:38Z",
      "side": 1,
      "message": "\"else\" condition equals to condition: |mode| \u003d\u003d 2.\n|mode|\u0027s value can only be 0,1,or 2, which was strictly controlled by the while loop and increased by 1 every time.",
      "parentUuid": "158662b4_dd9a45b1",
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76f6a62f_35e17ec4",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 182,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T22:37:30Z",
      "side": 1,
      "message": "This is Python; there is no static type checking enforcing this. It\u0027s perfectly possible to pass in mode\u003d4 by accident at run time.",
      "parentUuid": "bdf67350_d7097594",
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99091948_d9483daf",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 182,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-04-07T01:49:27Z",
      "side": 1,
      "message": "To not break the callers of this function, any suggestion on a not-existed path to be returned as error? I\u0027m thinking maybe using an empty string.",
      "parentUuid": "76f6a62f_35e17ec4",
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2377f704_2460ddf7",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 182,
      "author": {
        "id": 5045
      },
      "writtenOn": "2020-04-07T17:23:12Z",
      "side": 1,
      "message": "Not sure if you followed the discussion on the prior CL which pointed to http://google.github.io/styleguide/pyguide.html#244-decision. Given the example in that section on the document, I would change this to:\n\nelif mode \u003d\u003d CheckMode.CHECK_SKIAPATHS:\n  expected_str \u003d \u0027_expected_skiapaths\u0027\nelse\n  assert False, \u0027Unexpected CheckMode: %d.\u0027 % mode\n\nSince this is an internal function, use assert() to ensure internal correctness.\n\n\nIn C++, if we had enum InputEnum { val1, val2, val3}, we would still write:\n\nswitch (input) {\n  case val1:\n    ...\n  case val2:\n    ...\n  case val3:\n    ...\n};\n\nand not:\n\nswitch (input) {\n  case val1:\n    ...\n  case val2:\n    ...\n  default:  // Just assume val3\n    ...\n};",
      "parentUuid": "99091948_d9483daf",
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7365173_4a6fc1cb",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 193,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T19:16:25Z",
      "side": 1,
      "message": "Could make platform\u003dNone by default, and then you can just drop this parameter.",
      "range": {
        "startLine": 193,
        "startChar": 56,
        "endLine": 193,
        "endChar": 60
      },
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5a92606_98b43d8f",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 193,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-04-06T22:25:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7365173_4a6fc1cb",
      "range": {
        "startLine": 193,
        "startChar": 56,
        "endLine": 193,
        "endChar": 60
      },
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bbef95e_e972eb32",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 200,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T19:16:25Z",
      "side": 1,
      "message": "Given the repetition of code, it seems like all of this work could just be done in _GetExpectedTemplate(); you don\u0027t really need GetExpectedPAthByCheckMode()/GetPlatformExpectedPathByCheckMode(). The only real benefit is clarity of naming, which I think is very minor in this case.",
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2adb6c09_d6365cab",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 200,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-04-06T22:25:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7bbef95e_e972eb32",
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "985b8d8d_fd33ef32",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 202,
      "author": {
        "id": 7613
      },
      "writtenOn": "2020-04-06T19:16:25Z",
      "side": 1,
      "message": "Would it make sense to set this in the constructor instead? Does it vary across a single instance of this class?\n\nThis would also allow you to keep pregenerating the expected paths. (In fact, it looks like the only thing that really varies is the page number.)",
      "range": {
        "startLine": 202,
        "startChar": 45,
        "endLine": 202,
        "endChar": 57
      },
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf7e4a36_0ac4a820",
        "filename": "testing/tools/pngdiffer.py",
        "patchSetId": 19
      },
      "lineNbr": 202,
      "author": {
        "id": 7620
      },
      "writtenOn": "2020-04-06T22:25:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "985b8d8d_fd33ef32",
      "range": {
        "startLine": 202,
        "startChar": 45,
        "endLine": 202,
        "endChar": 57
      },
      "revId": "298cabd01b99adfb69d64cdc71266479c452982d",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    }
  ]
}