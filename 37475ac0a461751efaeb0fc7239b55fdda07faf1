{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "beba63bc_6447c416",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 9516
      },
      "writtenOn": "2024-02-22T14:31:09Z",
      "side": 1,
      "message": "It does look useful, I agree",
      "revId": "37475ac0a461751efaeb0fc7239b55fdda07faf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50957143_f0a9f52f",
        "filename": "core/fxcrt/fx_extension.h",
        "patchSetId": 6
      },
      "lineNbr": 126,
      "author": {
        "id": 9516
      },
      "writtenOn": "2024-02-22T14:31:09Z",
      "side": 1,
      "message": "nit: move the SAFETY comment on top of the UNSAFE_BUFFERS() directly",
      "revId": "37475ac0a461751efaeb0fc7239b55fdda07faf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0af50c74_73cb62b3",
        "filename": "core/fxcrt/fx_extension.h",
        "patchSetId": 6
      },
      "lineNbr": 126,
      "author": {
        "id": 5495
      },
      "writtenOn": "2024-02-22T18:23:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "50957143_f0a9f52f",
      "revId": "37475ac0a461751efaeb0fc7239b55fdda07faf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d008424_90bc71f4",
        "filename": "core/fxcrt/fx_extension.h",
        "patchSetId": 6
      },
      "lineNbr": 128,
      "author": {
        "id": 5495
      },
      "writtenOn": "2024-02-22T00:17:09Z",
      "side": 1,
      "message": "Alas, this seems like it needs to be a check, playing around on compiler explorer, the ?:nullptr code gets optimized out due to UB on subsequent deref.  Kinda want to return badptr (e.g. (char*)~(uintptr_t)15) instead of nullptr :).",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 128,
        "endChar": 14
      },
      "revId": "37475ac0a461751efaeb0fc7239b55fdda07faf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00bc9ec8_d57f4030",
        "filename": "core/fxcrt/fx_extension.h",
        "patchSetId": 6
      },
      "lineNbr": 128,
      "author": {
        "id": 9516
      },
      "writtenOn": "2024-02-22T14:24:28Z",
      "side": 1,
      "message": "Very good checking ðŸ˜Š",
      "parentUuid": "9d008424_90bc71f4",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 128,
        "endChar": 14
      },
      "revId": "37475ac0a461751efaeb0fc7239b55fdda07faf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff4adbb6_1210baea",
        "filename": "core/fxcrt/fx_extension.h",
        "patchSetId": 6
      },
      "lineNbr": 128,
      "author": {
        "id": 5495
      },
      "writtenOn": "2024-02-22T18:23:37Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "00bc9ec8_d57f4030",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 128,
        "endChar": 14
      },
      "revId": "37475ac0a461751efaeb0fc7239b55fdda07faf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2817e259_f8d51a82",
        "filename": "core/fxcrt/fx_extension_unittest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 267,
      "author": {
        "id": 9516
      },
      "writtenOn": "2024-02-22T14:31:09Z",
      "side": 1,
      "message": "EXPECT_DEATH then?",
      "revId": "37475ac0a461751efaeb0fc7239b55fdda07faf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7410db2b_be2a6b2c",
        "filename": "core/fxcrt/fx_extension_unittest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 267,
      "author": {
        "id": 5495
      },
      "writtenOn": "2024-02-22T18:23:37Z",
      "side": 1,
      "message": "Yeah, test needs to be updated.",
      "parentUuid": "2817e259_f8d51a82",
      "revId": "37475ac0a461751efaeb0fc7239b55fdda07faf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85df7520_a8f2433a",
        "filename": "core/fxcrt/fx_system.cpp",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 9516
      },
      "writtenOn": "2024-02-22T14:31:09Z",
      "side": 1,
      "message": "I think technically FXSYS_CStringAdvance is still UNSAFE_BUFFER_USAGE because you can hand it an incorrect buffer and it will walk off the end of it. The precondition is much easier to state than arithmetic that doesn\u0027t check for null though.",
      "revId": "37475ac0a461751efaeb0fc7239b55fdda07faf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d730e84_01e1163f",
        "filename": "core/fxcrt/fx_system.cpp",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 5495
      },
      "writtenOn": "2024-02-22T18:23:37Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "85df7520_a8f2433a",
      "revId": "37475ac0a461751efaeb0fc7239b55fdda07faf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eba4595d_486995ee",
        "filename": "core/fxcrt/fx_system.cpp",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 9516
      },
      "writtenOn": "2024-02-22T18:27:06Z",
      "side": 1,
      "message": "Additional idle thoughts, if it\u0027s a type in the parameter, then it should only be the caller that needs to write UNSAFE_BUFFERS() around the construction of the argument, and the function itself is not UNSAFE_BUFFER_USAGE because its parameter guarantees what it needs. I\u0027d feel even better about omitting all the UNSAFE_BUFFERS() use of the cstring after that.",
      "parentUuid": "8d730e84_01e1163f",
      "revId": "37475ac0a461751efaeb0fc7239b55fdda07faf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab30a0cc_e4a878eb",
        "filename": "core/fxcrt/fx_system.cpp",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 5495
      },
      "writtenOn": "2024-02-22T18:50:56Z",
      "side": 1,
      "message": "Yeah, OK, PDFium is kind of a playground for trying out such ideas, lemme see what it looks like.",
      "parentUuid": "eba4595d_486995ee",
      "revId": "37475ac0a461751efaeb0fc7239b55fdda07faf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c55ae262_4f14a8ae",
        "filename": "core/fxcrt/fx_system.cpp",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 5495
      },
      "writtenOn": "2024-02-22T18:55:00Z",
      "side": 1,
      "message": "But that would require a compiler fix + roll to resolve \"the unsafe_buffer_usage doesn\u0027t work on constructors\" issue first?",
      "parentUuid": "ab30a0cc_e4a878eb",
      "revId": "37475ac0a461751efaeb0fc7239b55fdda07faf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d3fbda2_5c2fc84b",
        "filename": "core/fxcrt/fx_system.cpp",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 9516
      },
      "writtenOn": "2024-02-22T18:56:41Z",
      "side": 1,
      "message": "To get a warning to happen, yes",
      "parentUuid": "c55ae262_4f14a8ae",
      "revId": "37475ac0a461751efaeb0fc7239b55fdda07faf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82e9eb26_50640ba9",
        "filename": "core/fxcrt/fx_system.cpp",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 9516
      },
      "writtenOn": "2024-02-22T18:57:21Z",
      "side": 1,
      "message": "If you wanted you can simulate it (warning-wise) with a static ctor method and make callers call it explicitly.",
      "parentUuid": "1d3fbda2_5c2fc84b",
      "revId": "37475ac0a461751efaeb0fc7239b55fdda07faf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c593c7f_f3af4b76",
        "filename": "core/fxcrt/widestring.cpp",
        "patchSetId": 6
      },
      "lineNbr": 112,
      "author": {
        "id": 9516
      },
      "writtenOn": "2024-02-22T14:31:09Z",
      "side": 1,
      "message": "// SAFETY: pStr[0..3] have been examined above and are non-NUL. Since pStr is a NUL-terminated string, advancing past them will remain inside the string\u0027s allocation.",
      "revId": "37475ac0a461751efaeb0fc7239b55fdda07faf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81a7f97f_6faa9324",
        "filename": "core/fxcrt/widestring.cpp",
        "patchSetId": 6
      },
      "lineNbr": 112,
      "author": {
        "id": 5495
      },
      "writtenOn": "2024-02-22T18:23:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c593c7f_f3af4b76",
      "revId": "37475ac0a461751efaeb0fc7239b55fdda07faf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    }
  ]
}