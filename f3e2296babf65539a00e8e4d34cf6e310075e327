{
  "comments": [
    {
      "key": {
        "uuid": "8af888c3_7036759c",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap.h",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 7613
      },
      "writtenOn": "2019-11-26T03:36:31Z",
      "side": 1,
      "message": "PDF 32000-1 and technical note #5411 appear to be in conflict: The technical note claims that ToUnicode maps from CIDs to UTF-16BE, while the PDF specification claims that ToUnicode maps from character codes (compatible with the font\u0027s encoding) to UTF-16BE. Both specs are compatible if the character code to CID mapping is UCS-2 (identity), but that may not be true for other encodings.\n\nI think the PDF specification is more correct here, and we should be treating the source codes as character codes, and not as CIDs. That means the character codes could be up to 4 bytes (9.7.6.2). We\u0027ll need to use an out-of-band solution after all; sorry for the churn. :-(",
      "range": {
        "startLine": 44,
        "startChar": 56,
        "endLine": 44,
        "endChar": 64
      },
      "revId": "f3e2296babf65539a00e8e4d34cf6e310075e327",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dce3d6f0_f2529451",
        "filename": "core/fpdfapi/font/cpdf_tounicodemap_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 7613
      },
      "writtenOn": "2019-11-26T03:36:31Z",
      "side": 1,
      "message": "It would be good to have some test cases with leading 0s that aren\u0027t invalid (like \"0000\" or \"0001\", for example.)",
      "revId": "f3e2296babf65539a00e8e4d34cf6e310075e327",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    }
  ]
}