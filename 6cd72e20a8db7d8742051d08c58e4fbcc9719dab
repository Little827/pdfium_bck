{
  "comments": [
    {
      "key": {
        "uuid": "df3495a3_ab36e118",
        "filename": "third_party/lcms/src/cmsopt.c",
        "patchSetId": 6
      },
      "lineNbr": 1548,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-09-10T21:16:24Z",
      "side": 1,
      "message": "So if |r| is 0, it becomes 0xF0000000 ?",
      "revId": "6cd72e20a8db7d8742051d08c58e4fbcc9719dab",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b712ef4b_0974386c",
        "filename": "third_party/lcms/src/cmsopt.c",
        "patchSetId": 6
      },
      "lineNbr": 1548,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-09-11T13:57:38Z",
      "side": 1,
      "message": "I don\u0027t think so.  |r| is of a signed type, and 0xF0000000 is by default a (relatively large) negative number.  0xF0000000 \u003d\u003d -268435456, and showing as the hexadecimal representation makes it clear how the upper nibble is being used for the clamping.",
      "parentUuid": "df3495a3_ab36e118",
      "revId": "6cd72e20a8db7d8742051d08c58e4fbcc9719dab",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97286126_8270334a",
        "filename": "third_party/lcms/src/cmsopt.c",
        "patchSetId": 6
      },
      "lineNbr": 1548,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-09-11T18:05:37Z",
      "side": 1,
      "message": "Can you use a signed int constant in the comparision to help with readability?",
      "parentUuid": "b712ef4b_0974386c",
      "revId": "6cd72e20a8db7d8742051d08c58e4fbcc9719dab",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "856af49e_00d1c00a",
        "filename": "third_party/lcms/src/cmsopt.c",
        "patchSetId": 6
      },
      "lineNbr": 1548,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-09-11T22:13:48Z",
      "side": 1,
      "message": "Sure - done.",
      "parentUuid": "97286126_8270334a",
      "revId": "6cd72e20a8db7d8742051d08c58e4fbcc9719dab",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea59adeb_d416d160",
        "filename": "third_party/lcms/src/cmsopt.c",
        "patchSetId": 6
      },
      "lineNbr": 1548,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-09-13T21:25:31Z",
      "side": 1,
      "message": "Missed this one. The numbers are still 0x... in the latest patch set.",
      "parentUuid": "856af49e_00d1c00a",
      "revId": "6cd72e20a8db7d8742051d08c58e4fbcc9719dab",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af44d6de_137c5f7d",
        "filename": "third_party/lcms/src/cmsopt.c",
        "patchSetId": 6
      },
      "lineNbr": 1552,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-09-10T21:16:24Z",
      "side": 1,
      "message": "We do very similar things for |r|, |g|, and |b| here, and very similar calculations to get |l1|, |l2|, and |l3|. WDYT about adding helper functions for those?",
      "revId": "6cd72e20a8db7d8742051d08c58e4fbcc9719dab",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0509477a_4c08d4bd",
        "filename": "third_party/lcms/src/cmsopt.c",
        "patchSetId": 6
      },
      "lineNbr": 1552,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-09-11T13:57:38Z",
      "side": 1,
      "message": "This function will be invoked as an inner loop for pixel processing, and in particular is an optimization for speed.  My thoughts are that ideally we wouldn\u0027t want to have extra function calls out for programmer convenience/readability at this level.",
      "parentUuid": "af44d6de_137c5f7d",
      "revId": "6cd72e20a8db7d8742051d08c58e4fbcc9719dab",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "500f999b_532281d6",
        "filename": "third_party/lcms/src/cmsopt.c",
        "patchSetId": 6
      },
      "lineNbr": 1552,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-09-11T18:05:37Z",
      "side": 1,
      "message": "Can you see a measurable difference if you added helper functions? Would cmsINLINE help in that case? Can we have performance and readability?",
      "parentUuid": "0509477a_4c08d4bd",
      "revId": "6cd72e20a8db7d8742051d08c58e4fbcc9719dab",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bdf1e86_93e815ac",
        "filename": "third_party/lcms/src/cmsopt.c",
        "patchSetId": 6
      },
      "lineNbr": 1552,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-09-11T22:13:48Z",
      "side": 1,
      "message": "When I had originally wrote this I was thinking it was a candidate for std::clamp, but that is only in C++17.\n\nGoing inline is a great idea for letting the compiler cover this for that - done.",
      "parentUuid": "500f999b_532281d6",
      "revId": "6cd72e20a8db7d8742051d08c58e4fbcc9719dab",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5737d87e_8e8be313",
        "filename": "third_party/lcms/src/cmsopt.c",
        "patchSetId": 6
      },
      "lineNbr": 1552,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-09-13T21:25:31Z",
      "side": 1,
      "message": "There are several suggestions that I wanted to make, but each time I realized this is not C++ code.",
      "parentUuid": "5bdf1e86_93e815ac",
      "revId": "6cd72e20a8db7d8742051d08c58e4fbcc9719dab",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    }
  ]
}