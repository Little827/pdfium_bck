{
  "comments": [
    {
      "key": {
        "uuid": "adcf595a_679e275d",
        "filename": "third_party/lcms/src/cmsopt.c",
        "patchSetId": 3
      },
      "lineNbr": 1545,
      "author": {
        "id": 5045
      },
      "writtenOn": "2019-09-04T01:09:30Z",
      "side": 1,
      "message": "Given a pattern of: a * b + c * d + e * f, where all 6 variables are int32_t. Assuming it is possible that they are all INT_MAX, even a 64-bit int can\u0027t hold the resulting calculation, right?",
      "revId": "b6f701988bbccdffa14062d2d7a27c89c5ce3bf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a3ad616_f2362f5d",
        "filename": "third_party/lcms/src/cmsopt.c",
        "patchSetId": 3
      },
      "lineNbr": 1545,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-09-04T05:19:43Z",
      "side": 1,
      "message": "True.\n\nThe table values are not supposed to hold INT_MAX, so I think that could be worked around by also enforcing that limitation per the description in [1].\n\nThat ensures that r,g,b will not be INT_MAX, but instead at most SHORT_MAX.  Then cmsInt64Number will not overflow even if all of the Mat entries are at the extremes.\n\n[1] https://cs.chromium.org/chromium/src/third_party/pdfium/third_party/lcms/src/cmsopt.c?rcl\u003daea4bca2621bf6c614b9c4c606c4c06e5a968d03\u0026l\u003d71",
      "parentUuid": "adcf595a_679e275d",
      "revId": "b6f701988bbccdffa14062d2d7a27c89c5ce3bf1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b",
      "unresolved": false
    }
  ]
}