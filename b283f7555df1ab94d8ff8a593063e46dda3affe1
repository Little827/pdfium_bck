{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1bb939bb_0113626b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5495
      },
      "writtenOn": "2024-04-30T23:13:38Z",
      "side": 1,
      "message": "We may need to revive this as scaffolding until some of the pragma usage is resolved, I\u0027m afraid.  I\u0027ll put this onto my current CL chain.",
      "revId": "b283f7555df1ab94d8ff8a593063e46dda3affe1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54144989_4404a3a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9516
      },
      "writtenOn": "2024-05-01T16:23:04Z",
      "side": 1,
      "message": "AFAIK it\u0027s all resolved now, but if not can you let me know what is not?",
      "parentUuid": "1bb939bb_0113626b",
      "revId": "b283f7555df1ab94d8ff8a593063e46dda3affe1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd0dc991_ae42a007",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5495
      },
      "writtenOn": "2024-05-01T16:35:38Z",
      "side": 1,
      "message": "Ok, so I can have a single macro that expands to #pragma ... ? Because we support MSVC and other non-chromium embedders and do not want to put noise into those builds or force changes to build scripts, etc. (e.g. g3).",
      "parentUuid": "54144989_4404a3a2",
      "revId": "b283f7555df1ab94d8ff8a593063e46dda3affe1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6f79a20_a0a86cb1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9516
      },
      "writtenOn": "2024-05-01T17:02:50Z",
      "side": 1,
      "message": "`#pragma allow_unsafe_usage` should be behind `#ifdef UNSAFE_BUFFERS_BUILD`. It\u0027s not defined when the plugin is not in use.\n\nIs that what you\u0027re thinking of?",
      "parentUuid": "bd0dc991_ae42a007",
      "revId": "b283f7555df1ab94d8ff8a593063e46dda3affe1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5e51dba_477d264a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5495
      },
      "writtenOn": "2024-05-01T17:32:39Z",
      "side": 1,
      "message": "That\u0027ll do it.  And such a pragam applies only to, say, a header file that invokes it?\n\nBTW, where does UNSAFE_BUFFERS_BUILD get defined at?",
      "parentUuid": "e6f79a20_a0a86cb1",
      "revId": "b283f7555df1ab94d8ff8a593063e46dda3affe1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfb4e287_7a0517d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9516
      },
      "writtenOn": "2024-05-01T17:44:17Z",
      "side": 1,
      "message": "Yeah the pragma applies only to the file it is in.\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:build/config/clang/BUILD.gn;l\u003d107;drc\u003d0cfdf31712200cbe98eea8e6273a141b14e560de",
      "parentUuid": "c5e51dba_477d264a",
      "revId": "b283f7555df1ab94d8ff8a593063e46dda3affe1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57156d96_c4fea0a5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5495
      },
      "writtenOn": "2024-05-01T17:47:11Z",
      "side": 1,
      "message": "Also, should the UNSAFE_BUFFERS() macro in compiler_specific.h now be guarded/conditionalized by the UNSAFE_BUFFERS_BUILD definition instead of ifdef clang?",
      "parentUuid": "c5e51dba_477d264a",
      "revId": "b283f7555df1ab94d8ff8a593063e46dda3affe1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19093960_76f41db7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9516
      },
      "writtenOn": "2024-05-01T17:48:03Z",
      "side": 1,
      "message": "that would allow it to support older clangs before it exists, if we care for that.",
      "parentUuid": "57156d96_c4fea0a5",
      "revId": "b283f7555df1ab94d8ff8a593063e46dda3affe1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07849ae4_6cf99b5a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5495
      },
      "writtenOn": "2024-05-01T17:54:19Z",
      "side": 1,
      "message": "I\u0027m more concenred about having two ways to test for this which can get out of sync with each other rather than a single point of truth.",
      "parentUuid": "19093960_76f41db7",
      "revId": "b283f7555df1ab94d8ff8a593063e46dda3affe1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0894355_fec6bd09",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9516
      },
      "writtenOn": "2024-05-01T17:58:22Z",
      "side": 1,
      "message": "If you\u0027d like to change it, that\u0027s fine. But it\u0027s also fine to turn off warnings that aren\u0027t enabled as it does now.",
      "parentUuid": "07849ae4_6cf99b5a",
      "revId": "b283f7555df1ab94d8ff8a593063e46dda3affe1",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    }
  ]
}