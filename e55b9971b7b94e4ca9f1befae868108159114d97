{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1e961d67_3d7584e5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-03-17T16:36:47Z",
      "side": 1,
      "message": "Something small to get the process started.",
      "revId": "e55b9971b7b94e4ca9f1befae868108159114d97",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45a6b82e_780730c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5495
      },
      "writtenOn": "2022-04-27T18:53:07Z",
      "side": 1,
      "message": "Alternatively, can we get the bytestringview changes landed as a separate CL? And do the same for widestringview if required in the same cl?  Might be nice to add std::less\u003c\u003e to other string maps,",
      "revId": "e55b9971b7b94e4ca9f1befae868108159114d97",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65ad9b03_517c2064",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5495
      },
      "writtenOn": "2022-04-28T20:07:41Z",
      "side": 1,
      "message": "Anyways, landing this and the lookup-only portions of the next CL in the chain would enable making bytestring constructor explicit with fewer changes.",
      "revId": "e55b9971b7b94e4ca9f1befae868108159114d97",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "603b234d_986ae107",
        "filename": "core/fpdfapi/parser/cpdf_dictionary.h",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 5495
      },
      "writtenOn": "2022-03-17T18:41:16Z",
      "side": 1,
      "message": "just a thought, do we want two forms of this method, one for bytestring and one for bytestringview?",
      "range": {
        "startLine": 115,
        "startChar": 25,
        "endLine": 115,
        "endChar": 55
      },
      "revId": "e55b9971b7b94e4ca9f1befae868108159114d97",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2e35c60_55aa3c4c",
        "filename": "core/fpdfapi/parser/cpdf_dictionary.h",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 5495
      },
      "writtenOn": "2022-04-27T21:50:41Z",
      "side": 1,
      "message": "We can deal with this later once the bytestring() ctor is explicit, then literals become unabigous.",
      "parentUuid": "603b234d_986ae107",
      "range": {
        "startLine": 115,
        "startChar": 25,
        "endLine": 115,
        "endChar": 55
      },
      "revId": "e55b9971b7b94e4ca9f1befae868108159114d97",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84e636d4_3d57348f",
        "filename": "core/fpdfapi/parser/cpdf_dictionary.h",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-05-05T23:53:53Z",
      "side": 1,
      "message": "In Chromium, the API would just take base::StringPiece, and the caller can pass in std::string without an explicit conversion. If we follow that pattern, we would not add a ByteString variant here, and change the caller to not have to call ByteString::AsStringView().",
      "parentUuid": "e2e35c60_55aa3c4c",
      "range": {
        "startLine": 115,
        "startChar": 25,
        "endLine": 115,
        "endChar": 55
      },
      "revId": "e55b9971b7b94e4ca9f1befae868108159114d97",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7866314f_259eebfa",
        "filename": "core/fxcrt/bytestring.h",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 5495
      },
      "writtenOn": "2022-04-27T21:49:11Z",
      "side": 1,
      "message": "shouldn\u0027t this one be part of string_view_template? The previous one can\u0027t, because views don\u0027t know about strings, but this one has no string involved, just views.",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 246,
        "endChar": 67
      },
      "revId": "e55b9971b7b94e4ca9f1befae868108159114d97",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5b1c0c0_b0ca625a",
        "filename": "core/fxcrt/bytestring.h",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 5495
      },
      "writtenOn": "2022-04-27T23:16:46Z",
      "side": 1,
      "message": "Also, not sure we need this, since rhs silently promotes to BSV?",
      "parentUuid": "7866314f_259eebfa",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 246,
        "endChar": 67
      },
      "revId": "e55b9971b7b94e4ca9f1befae868108159114d97",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce91d351_a894bd4e",
        "filename": "core/fxcrt/bytestring.h",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 5495
      },
      "writtenOn": "2022-04-28T16:39:34Z",
      "side": 1,
      "message": "Or is this just to avoid ambiguity in template resolution?",
      "parentUuid": "e5b1c0c0_b0ca625a",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 246,
        "endChar": 67
      },
      "revId": "e55b9971b7b94e4ca9f1befae868108159114d97",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97eb8e4e_a65ba172",
        "filename": "core/fxcrt/bytestring.h",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-05-05T23:53:53Z",
      "side": 1,
      "message": "To make template resolution work. Without these, the std::map change in cpdf_dictionary.h triggers a compiler error: no matching function for call to object of type \u0027const std::less\u003c\u003e\u0027",
      "parentUuid": "ce91d351_a894bd4e",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 246,
        "endChar": 67
      },
      "revId": "e55b9971b7b94e4ca9f1befae868108159114d97",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfebc2e8_23453b2c",
        "filename": "core/fxcrt/bytestring_unittest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 236,
      "author": {
        "id": 5495
      },
      "writtenOn": "2022-04-28T16:39:34Z",
      "side": 1,
      "message": "might be fun to add a test involving, say,  std::set\u003cByteString, std::less\u003c\u003e\u003e and show that insert from bytestring is found via lookup from views.",
      "range": {
        "startLine": 236,
        "startChar": 0,
        "endLine": 236,
        "endChar": 0
      },
      "revId": "e55b9971b7b94e4ca9f1befae868108159114d97",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "671b92d4_94781d7f",
        "filename": "core/fxcrt/bytestring_unittest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 236,
      "author": {
        "id": 5045
      },
      "writtenOn": "2022-05-05T23:53:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cfebc2e8_23453b2c",
      "range": {
        "startLine": 236,
        "startChar": 0,
        "endLine": 236,
        "endChar": 0
      },
      "revId": "e55b9971b7b94e4ca9f1befae868108159114d97",
      "serverId": "fca2d64a-0420-3532-b200-12848c95a47b"
    }
  ]
}